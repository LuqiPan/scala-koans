format version: 5
output mode:
1 items
0 -> single
output directories:
1 items
output dir -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes
compile options:
3 items
0 -> -deprecation
1 -> -unchecked
2 -> -feature
javac options:
0 items
compiler version:
1 items
0 -> 2.10.4
compile order:
1 items
0 -> Mixed
name hashing:
1 items
0 -> true
products:
668 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$4$$anonfun$apply$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$2$$anonfun$makeFullNamePrettyVersion$1$1$$anonfun$apply$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$2$$anonfun$makeFullNamePrettyVersion$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$3$$anonfun$4$$anonfun$apply$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$3$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$1$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$3$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$5$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$5$PigLatinizer$2$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$1$Person$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$1$Person$7$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$2$Person$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$2$Person$9$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$3$Dog$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$3$Dog$12$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$4$Dog$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$4$Dog$14$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$5$Dog$15.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$5$Dog$16$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$6$Dog$17.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$6$Dog$18$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$7$Dog$19.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$7$Dog$20$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$Person$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$Person.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$ClassWithPrivateFields.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$ClassWithValParameter.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$ClassWithVarParameter.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$AboutClassWithNoClassParameter.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$AboutConstructorWithAuxiliaryConstructor.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$11$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$11$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$8$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$1$Planets$4$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$2$GreekPlanets$3$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$3$Planets$5$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$4$GreekPlanets$4$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$5$Planets$6$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$5$Planets$6$PlanetValue.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$1$Employee$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$1$Employee$6$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$2$Car$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$2$ChopShop$4$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$3$Car$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$3$ChopShop$5$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$4$Car$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$4$ChopShop$6$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5$Car$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5$Employee$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5$Tokenizer$2$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$6$Car$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$7$Employee$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$7$Employee$9$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$8$Employee$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$8$Employee$11$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$1$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$2$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$3$$anonfun$4$$anonfun$apply$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$3$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anon$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anonfun$lambda$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anonfun$lambda2$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$10$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$10$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12$$anonfun$14.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$3$$anonfun$lambda$2$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$4$$anonfun$closure$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$5$$anonfun$closure$2$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$6$$anon$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$7$$anonfun$addWithSyntaxSugar$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$8$$anonfun$addWithSyntaxSugar$2$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9$$anonfun$apply$mcV$sp$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9$$anonfun$makeUpper$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$1$KoanIntWrapper$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$2$MyPredef$2$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$2$MyPredef$2$KoanIntWrapper.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$5$Stereo$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1$Loves$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1$Person$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1$Person$6$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2$Loves$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2$Person$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2$Person$8$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability$Boat.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$6$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$6$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$8$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$9$$anonfun$org$functionalkoans$forscala$AboutLazySequences$$anonfun$$makeLazy$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$10$$anonfun$apply$mcV$sp$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$10$$anonfun$apply$mcV$sp$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$11$$anonfun$apply$mcV$sp$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$11$$anonfun$apply$mcV$sp$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$12$$anonfun$apply$mcV$sp$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$12$$anonfun$apply$mcV$sp$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$14.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$15.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$6$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$7$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$9$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$9$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralBooleans$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralBooleans.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests$$anonfun$2$Barrel$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Monkey.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$14.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$6$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$6$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$6$$anonfun$reduce$default$2$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithClassParameters.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithClassParametersInClassDefinition$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithClassParametersInClassDefinition.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithoutClassParameters.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$1$Greeting$3$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$2$Greeting$4$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$3$Movie$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$3$Movie$3$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Person$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Person.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/SecretAgent$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/SecretAgent.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$2$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$1$Employee$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$1$Worker$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$2$Employee$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$2$Worker$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$3$Worker$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4$Employee$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4$Worker$4$Assignment.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4$Worker$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$10$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$10$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$9$$anon$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$9$$anon$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$1$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$2$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPathDependentTypes$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPathDependentTypes.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board$Coordinate$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board$Coordinate.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions$$anonfun$1$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions$WithParameterRequirement.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$10$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$3$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$5$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$5$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$8$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$9$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$10$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$14.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$15.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$Event$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$Event$8$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$EventListener$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$MyListener$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$Event$10$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$Event$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$EventListener$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$MyListener$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$OurListener$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$Event$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$Event$12$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$EventListener$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$MyListener$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Baker$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Logging$1$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Logging$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Welder$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5$C1$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5$T1$2$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5$T1$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$C1$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T1$3$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T1$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T2$2$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T2$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$C1$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T1$1$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T2$3$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T2$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$C1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T1$4$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T1$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T2$1$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T2$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T3$1$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T3$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$10$$anonfun$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$13$$anonfun$79$$anonfun$apply$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$13$$anonfun$79.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$14$$anonfun$80.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$14.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$15$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$15.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$16$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$16$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$16.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$17$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$17.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$18.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$19.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$20.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$21.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$22.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$23.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$24.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$25.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$26.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$27.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$28.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$29.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$30.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$31$$anonfun$81$$anonfun$apply$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$31$$anonfun$81.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$31.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$32.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$33.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$34.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$35.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$36$$anonfun$apply$mcV$sp$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$36$$anonfun$apply$mcV$sp$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$36.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$37.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$38.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$39.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$40.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$41$$anonfun$org$functionalkoans$forscala$AboutTraversables$$anonfun$$streamer$1$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$41.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$42$$anonfun$org$functionalkoans$forscala$AboutTraversables$$anonfun$$streamer$2$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$42.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$43$$anonfun$apply$mcV$sp$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$43.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$44$$anonfun$apply$mcV$sp$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$44.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$45$$anonfun$apply$mcV$sp$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$45.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$46$$anonfun$apply$mcV$sp$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$46.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$47.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$48$$anonfun$49.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$48.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$50$$anonfun$51.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$50.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$53$$anonfun$54.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$53.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$55$$anonfun$56.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$55.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$57$$anonfun$58.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$57.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$60.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$61.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$62.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$63.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$65.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$66.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$67.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$68.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$69$$anonfun$apply$mcV$sp$19.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$69$$anonfun$apply$mcV$sp$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$69.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$70$$anonfun$apply$mcV$sp$20.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$70$$anonfun$apply$mcV$sp$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$70.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$71.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$72$$anonfun$apply$mcV$sp$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$72$$anonfun$apply$mcV$sp$11.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$72.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$73.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$74.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$75.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$76$$anonfun$apply$mcV$sp$12.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$76.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$13.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$14.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$15.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$16.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$78$$anonfun$apply$mcV$sp$17.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$78$$anonfun$apply$mcV$sp$18.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$78.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$3$IntRandomizer$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$3$Randomizer$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$6$IntRandomizer$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$6$Randomizer$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$7$IntRandomizer$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$7$Randomizer$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8$$anonfun$apply$mcV$sp$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8$IntRandomizer$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8$Randomizer$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$1$MyContainer$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$10$MyContainer$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$10.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$2$MyContainer$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$3$MyContainer$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$4$MyContainer$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$5$MyContainer$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$6$MyContainer$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$6$NavelOrange$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$6.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$7$MyContainer$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$7.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$8$MyContainer$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$8.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$9$MyContainer$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$9.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Apple.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Banana.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Citrus.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Fruit.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Orange.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Tangelo.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$3.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$4.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$5.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$CalculatesAgeUsingMethod.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$CalculatesAgeUsingProperty.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutValAndVar$$anonfun$1.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutValAndVar$$anonfun$2.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutValAndVar.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Koans.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite$ReportToTheMaster.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite$___.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite$class.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/Master$.class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/Master.class
binary dependencies:
153 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> /Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> /Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar
direct source dependencies:
0 items
direct external dependencies:
0 items
public inherited source dependencies:
0 items
public inherited external dependencies:
0 items
member reference internal dependencies:
93 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala
member reference external dependencies:
1 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> org.functionalkoans.forscala.SomeJavaClass
inheritance internal dependencies:
48 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> /Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala
inheritance external dependencies:
0 items
class names:
668 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$4$$anonfun$apply$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$2$$anonfun$makeFullNamePrettyVersion$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$2$$anonfun$makeFullNamePrettyVersion$1$1$$anonfun$apply$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$3$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org.functionalkoans.forscala.AboutAdvancedOptions$$anonfun$3$$anonfun$4$$anonfun$apply$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org.functionalkoans.forscala.AboutAsserts
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org.functionalkoans.forscala.AboutAsserts$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org.functionalkoans.forscala.AboutAsserts$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org.functionalkoans.forscala.AboutAsserts$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org.functionalkoans.forscala.AboutAsserts$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org.functionalkoans.forscala.AboutAsserts$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$1$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$3$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$5$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org.functionalkoans.forscala.AboutByNameParameter$$anonfun$5$PigLatinizer$2$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$1$Person$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$1$Person$7$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$2$Person$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$2$Person$9$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$3$Dog$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$3$Dog$12$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$4$Dog$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$4$Dog$14$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$5$Dog$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$5$Dog$16$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$6$Dog$17
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$6$Dog$18$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$7$Dog$19
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$7$Dog$20$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$Person
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org.functionalkoans.forscala.AboutCaseClasses$Person$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses$ClassWithPrivateFields
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses$ClassWithValParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org.functionalkoans.forscala.AboutClasses$ClassWithVarParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> org.functionalkoans.forscala.AboutConstructors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> org.functionalkoans.forscala.AboutConstructors$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> org.functionalkoans.forscala.AboutConstructors$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> org.functionalkoans.forscala.AboutConstructors$AboutClassWithNoClassParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> org.functionalkoans.forscala.AboutConstructors$AboutConstructorWithAuxiliaryConstructor
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$11$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$11$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$8$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org.functionalkoans.forscala.AboutEmptyValues$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$1$Planets$4$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$2$GreekPlanets$3$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$3$Planets$5$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$4$GreekPlanets$4$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$5$Planets$6$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org.functionalkoans.forscala.AboutEnumerations$$anonfun$5$Planets$6$PlanetValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$1$Employee$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$1$Employee$6$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$2$Car$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$2$ChopShop$4$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$3$Car$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$3$ChopShop$5$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$4$Car$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$4$ChopShop$6$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$5$Car$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$5$Employee$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$5$Tokenizer$2$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$6$Car$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$7$Employee$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$7$Employee$9$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$8$Employee$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org.functionalkoans.forscala.AboutExtractors$$anonfun$8$Employee$11$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$1$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$2$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$3$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org.functionalkoans.forscala.AboutForExpressions$$anonfun$3$$anonfun$4$$anonfun$apply$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org.functionalkoans.forscala.AboutFormatting
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org.functionalkoans.forscala.AboutFormatting$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org.functionalkoans.forscala.AboutFormatting$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org.functionalkoans.forscala.AboutFormatting$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org.functionalkoans.forscala.AboutFormatting$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org.functionalkoans.forscala.AboutFormatting$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$1$$anon$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$1$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$1$$anonfun$lambda$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$1$$anonfun$lambda2$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$10$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$10$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$12$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$12$$anonfun$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$12$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$3$$anonfun$lambda$2$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$4$$anonfun$closure$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$5$$anonfun$closure$2$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$6$$anon$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$7$$anonfun$addWithSyntaxSugar$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$8$$anonfun$addWithSyntaxSugar$2$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$9$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$9$$anonfun$apply$mcV$sp$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org.functionalkoans.forscala.AboutHigherOrderFunctions$$anonfun$9$$anonfun$makeUpper$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$1$KoanIntWrapper$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$2$MyPredef$2$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$2$MyPredef$2$KoanIntWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org.functionalkoans.forscala.AboutImplicits$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org.functionalkoans.forscala.AboutInfixPrefixAndPostfixOperators$$anonfun$5$Stereo$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$1$Loves$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$1$Person$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$1$Person$6$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$2$Loves$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$2$Person$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org.functionalkoans.forscala.AboutInfixTypes$$anonfun$2$Person$8$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> org.functionalkoans.forscala.AboutInteroperability
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> org.functionalkoans.forscala.AboutInteroperability$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> org.functionalkoans.forscala.AboutInteroperability$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> org.functionalkoans.forscala.AboutInteroperability$Boat
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org.functionalkoans.forscala.AboutIterables$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$6$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$6$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$8$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org.functionalkoans.forscala.AboutLazySequences$$anonfun$9$$anonfun$org$functionalkoans$forscala$AboutLazySequences$$anonfun$$makeLazy$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$10$$anonfun$apply$mcV$sp$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$10$$anonfun$apply$mcV$sp$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$11$$anonfun$apply$mcV$sp$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$11$$anonfun$apply$mcV$sp$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$12$$anonfun$apply$mcV$sp$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$12$$anonfun$apply$mcV$sp$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$6$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$7$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$9$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org.functionalkoans.forscala.AboutLists$$anonfun$9$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> org.functionalkoans.forscala.AboutLiteralBooleans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> org.functionalkoans.forscala.AboutLiteralBooleans$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> org.functionalkoans.forscala.AboutLiteralNumbers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> org.functionalkoans.forscala.AboutLiteralNumbers$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> org.functionalkoans.forscala.AboutLiteralNumbers$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> org.functionalkoans.forscala.AboutLiteralNumbers$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org.functionalkoans.forscala.AboutLiteralStrings$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> org.functionalkoans.forscala.AboutManifests
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> org.functionalkoans.forscala.AboutManifests$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> org.functionalkoans.forscala.AboutManifests$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> org.functionalkoans.forscala.AboutManifests$$anonfun$2$Barrel$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> org.functionalkoans.forscala.Monkey
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org.functionalkoans.forscala.AboutMaps$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org.functionalkoans.forscala.AboutMethods$$anonfun$6$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org.functionalkoans.forscala.AboutMutableMaps$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org.functionalkoans.forscala.AboutMutableSets$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$6$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$$anonfun$6$$anonfun$reduce$default$2$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$WithClassParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$WithClassParametersInClassDefinition
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$WithClassParametersInClassDefinition$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org.functionalkoans.forscala.AboutNamedAndDefaultArguments$WithoutClassParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$1$Greeting$3$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$2$Greeting$4$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$3$Movie$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$3$Movie$3$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.AboutObjects$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.Person
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.Person$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.SecretAgent
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org.functionalkoans.forscala.SecretAgent$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$2$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org.functionalkoans.forscala.AboutOptions$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$1$Employee$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$1$Worker$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$2$Employee$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$2$Worker$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$3$Worker$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$4$Employee$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$4$Worker$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org.functionalkoans.forscala.AboutParentClasses$$anonfun$4$Worker$4$Assignment
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$10$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$10$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$11$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$11$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$11$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$13$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$13$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$13$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$13$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$9$$anon$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org.functionalkoans.forscala.AboutPartialFunctions$$anonfun$9$$anon$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> org.functionalkoans.forscala.AboutPartiallyAppliedFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> org.functionalkoans.forscala.AboutPartiallyAppliedFunctions$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> org.functionalkoans.forscala.AboutPartiallyAppliedFunctions$$anonfun$1$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> org.functionalkoans.forscala.AboutPartiallyAppliedFunctions$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> org.functionalkoans.forscala.AboutPartiallyAppliedFunctions$$anonfun$2$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org.functionalkoans.forscala.AboutPathDependentTypes
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org.functionalkoans.forscala.AboutPathDependentTypes$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org.functionalkoans.forscala.Board
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org.functionalkoans.forscala.Board$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org.functionalkoans.forscala.Board$Coordinate
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org.functionalkoans.forscala.Board$Coordinate$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org.functionalkoans.forscala.AboutPatternMatching$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> org.functionalkoans.forscala.AboutPreconditions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> org.functionalkoans.forscala.AboutPreconditions$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> org.functionalkoans.forscala.AboutPreconditions$$anonfun$1$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> org.functionalkoans.forscala.AboutPreconditions$WithParameterRequirement
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> org.functionalkoans.forscala.AboutRange
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> org.functionalkoans.forscala.AboutRange$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> org.functionalkoans.forscala.AboutRange$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> org.functionalkoans.forscala.AboutRange$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> org.functionalkoans.forscala.AboutRange$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> org.functionalkoans.forscala.AboutRecursion
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> org.functionalkoans.forscala.AboutRecursion$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> org.functionalkoans.forscala.AboutRecursion$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> org.functionalkoans.forscala.AboutRecursion$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> org.functionalkoans.forscala.AboutRepeatedParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> org.functionalkoans.forscala.AboutRepeatedParameters$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> org.functionalkoans.forscala.AboutRepeatedParameters$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> org.functionalkoans.forscala.AboutRepeatedParameters$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$10$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$3$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$5$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$5$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$8$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org.functionalkoans.forscala.AboutSequencesAndArrays$$anonfun$9$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$10$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org.functionalkoans.forscala.AboutSets$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$1$Event$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$1$Event$8$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$1$EventListener$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$1$MyListener$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$2$Event$10$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$2$Event$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$2$EventListener$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$2$MyListener$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$2$OurListener$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$3$Event$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$3$Event$12$
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$3$EventListener$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$3$MyListener$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$4$Baker$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$4$Logging$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$4$Logging$1$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$4$Welder$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$5$C1$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$5$T1$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$5$T1$2$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$6$C1$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$6$T1$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$6$T1$3$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$6$T2$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$6$T2$2$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$7$C1$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$7$T1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$7$T1$1$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$7$T2$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$7$T2$3$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$C1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$T1$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$T1$4$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$T2$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$T2$1$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$T3$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org.functionalkoans.forscala.AboutTraits$$anonfun$8$T3$1$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$10$$anonfun$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$13$$anonfun$79
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$13$$anonfun$79$$anonfun$apply$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$14$$anonfun$80
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$15$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$16
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$16$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$16$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$17
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$17$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$18
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$19
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$20
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$21
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$22
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$23
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$24
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$25
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$26
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$27
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$28
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$29
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$30
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$31
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$31$$anonfun$81
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$31$$anonfun$81$$anonfun$apply$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$32
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$33
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$34
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$35
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$36
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$36$$anonfun$apply$mcV$sp$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$36$$anonfun$apply$mcV$sp$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$37
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$38
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$39
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$40
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$41
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$41$$anonfun$org$functionalkoans$forscala$AboutTraversables$$anonfun$$streamer$1$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$42
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$42$$anonfun$org$functionalkoans$forscala$AboutTraversables$$anonfun$$streamer$2$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$43
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$43$$anonfun$apply$mcV$sp$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$44
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$44$$anonfun$apply$mcV$sp$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$45
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$45$$anonfun$apply$mcV$sp$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$46
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$46$$anonfun$apply$mcV$sp$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$47
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$48
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$48$$anonfun$49
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$50
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$50$$anonfun$51
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$52
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$52$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$52$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$52$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$52$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$52$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$53
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$53$$anonfun$54
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$55
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$55$$anonfun$56
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$57
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$57$$anonfun$58
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$59
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$59$$anonfun$60
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$59$$anonfun$61
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$59$$anonfun$62
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$59$$anonfun$63
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$64
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$64$$anonfun$65
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$64$$anonfun$66
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$64$$anonfun$67
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$64$$anonfun$68
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$69
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$69$$anonfun$apply$mcV$sp$19
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$69$$anonfun$apply$mcV$sp$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$70
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$70$$anonfun$apply$mcV$sp$20
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$70$$anonfun$apply$mcV$sp$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$71
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$72
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$72$$anonfun$apply$mcV$sp$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$72$$anonfun$apply$mcV$sp$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$73
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$74
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$75
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$76
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$76$$anonfun$apply$mcV$sp$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$77
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$16
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$78
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$78$$anonfun$apply$mcV$sp$17
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$78$$anonfun$apply$mcV$sp$18
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org.functionalkoans.forscala.AboutTraversables$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> org.functionalkoans.forscala.AboutTuples
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> org.functionalkoans.forscala.AboutTuples$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> org.functionalkoans.forscala.AboutTuples$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> org.functionalkoans.forscala.AboutTuples$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> org.functionalkoans.forscala.AboutTuples$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$3$IntRandomizer$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$3$Randomizer$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$6$IntRandomizer$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$6$Randomizer$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$7$IntRandomizer$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$7$Randomizer$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$8$$anonfun$apply$mcV$sp$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$8$IntRandomizer$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$8$Randomizer$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org.functionalkoans.forscala.AboutTypeSignatures$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$1$MyContainer$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$10$MyContainer$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$2$MyContainer$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$3$MyContainer$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$4$MyContainer$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$5$MyContainer$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$6$MyContainer$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$6$NavelOrange$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$7$MyContainer$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$8$MyContainer$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$$anonfun$9$MyContainer$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$Apple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$Banana
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$Citrus
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$Fruit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$Orange
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org.functionalkoans.forscala.AboutTypeVariance$Tangelo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$$anonfun$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$$anonfun$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$$anonfun$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$CalculatesAgeUsingMethod
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org.functionalkoans.forscala.AboutUniformAccessPrinciple$CalculatesAgeUsingProperty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> org.functionalkoans.forscala.AboutValAndVar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> org.functionalkoans.forscala.AboutValAndVar$$anonfun$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> org.functionalkoans.forscala.AboutValAndVar$$anonfun$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> org.functionalkoans.forscala.Koans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> org.functionalkoans.forscala.support.KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> org.functionalkoans.forscala.support.KoanSuite$ReportToTheMaster
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> org.functionalkoans.forscala.support.KoanSuite$___
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> org.functionalkoans.forscala.support.KoanSuite$class
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> org.functionalkoans.forscala.support.Master
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> org.functionalkoans.forscala.support.Master$
used names:
2294 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> AboutAdvancedOptions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> Option
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> firstName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> flatMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> fname
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> foreach
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> lastName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> lname
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> makeFullName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> makeFullNamePrettyVersion
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> newValue1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> newValue2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> newValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> option2Iterable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> someValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> value
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> values
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> ===
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> AboutAsserts
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> assert
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> convertToEqualizer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> v1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> v2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> ++
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> <byname>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> AboutByNameParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Either
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Function0
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Left
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> PigLatinizer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Right
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> StringCanBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> Throwable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> calc
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> head
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> println
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> result
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> tail
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> z
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> AboutCaseClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> AbstractFunction2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> AbstractFunction4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Dog
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Person
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Product
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> ScalaRunTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Serializable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> Statics
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> _1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> _2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> _3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> _4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> _hashCode
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> _toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> age
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> anyHash
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> breed
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> d1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> d2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> d3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> finalizeHash
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> first
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> get
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> last
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> mix
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> name_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> p1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> p2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> p3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> p4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> parts
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> runtime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> ssn
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> typedProductIterator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> x$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> ||
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> AboutClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> ClassWithPrivateFields
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> ClassWithValParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> ClassWithVarParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> aClass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> description
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> description_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> AboutClassWithNoClassParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> AboutConstructorWithAuxiliaryConstructor
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> AboutConstructors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> aboutMe
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> ===
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> AboutEmptyValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> AnyVal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> ClassCastException
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> Option
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> assert
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> convertToEqualizer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> getOrElse
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> intercept
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> isEmpty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> optional
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> optional2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> toList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> /
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> AboutEnumerations
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Double
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Earth
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Enumeration
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> G
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> GreekPlanets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Jupiter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Mars
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Mercury
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Neptune
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> PlanetValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Planets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Pluto
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Saturn
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Uranus
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Val
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Value
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> Venus
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> convertToDoubleShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> id
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> mass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> otherMass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> radius
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> surfaceGravity
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> that
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> AboutExtractors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> AbstractFunction2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Car
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> ChopShop
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Employee
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Option
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Product
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> ScalaRunTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Serializable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Short
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> Tokenizer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> _1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> _2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> _3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> _4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> _hashCode
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> _toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> camaro
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> convertToShortShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> firstName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> get
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> isEmpty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> lastName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> make
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> middleName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> model
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> ne
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> result
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> rob
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> runtime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> s
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> singri
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> t
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> topSpeed
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> typedProductIterator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> unapply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> unary_!
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> unchecked
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> year
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> ||
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> AboutForExpressions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> IndexedSeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> Range
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> coordinates
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> equal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> flatMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> foreach
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> someNumbers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> sum
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> xValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> yValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> AboutFormatting
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> e
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> j
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> k
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> s
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> $anon
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> AboutHigherOrderFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Boolean
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Function1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Function2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Nothing
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> addWithSyntaxSugar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> addWithoutSyntaxSugar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> closure
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> curried
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> customFilter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> fiveAdder
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> incrementer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> lambda
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> lambda2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> lambda3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> lambda4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> lambda5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> length
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> makeUpper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> makeWhatEverYouLike
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> multiply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> multiplyCurried
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> onlyEven
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> onlyEvenFilter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result1andhalf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> result5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> sideEffect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> summation
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> toLowerCase
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> toUpperCase
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> v1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> xs
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> AboutImplicits
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> BigDecimal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> BigInteger
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> Int2BigIntegerConvert
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> KoanIntWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> MyPredef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> add
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> amount
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> currencyName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> dollarsPerHour
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> hourlyRate
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> hours
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> howMuchCanIMake_?
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> implicitConversions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> int2bigDecimal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> isOdd
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> java
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> language
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> math
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> original
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> thisMethodNameIsIrrelevant
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> unary_!
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> value
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> AboutInfixPrefixAndPostfixOperators
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> Stereo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> g
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> indexOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> intWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> language
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> postfixOps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> stereo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> toHexString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> unary_+
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> unary_-
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> A
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> AboutInfixTypes
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> AbstractFunction1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> B
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Loves
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Nothing
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Person
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Product
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> ScalaRunTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> Serializable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> _hashCode
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> _toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> announceCouple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> couple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> juliet
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> loves
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> person
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> romeo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> runtime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> typedProductIterator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> ||
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> AboutInteroperability
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> Boat
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> JavaConversions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> SomeJavaClass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> e
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> findSizeOfRawType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> findSizeOfUnknownType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> seqAsJavaList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> AboutIterables
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> Set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> dropRight
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> grouped
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> hasNext
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> it
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> iterator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> list
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> next
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> sameElements
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> sliding
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> takeRight
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> xs
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> xs1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> ys
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> ys1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> zip
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> zipAll
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> zipWithIndex
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> /
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> AboutLazySequences
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> ArithmeticException
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> IntIsIntegral
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> Numeric
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> SeqView
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> Stream
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> cons
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> continually
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> from
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> head
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> inc
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> infinite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> intercept
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> java
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> lang
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> lazyList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> makeLazy
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> math
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> stream
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> strictList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> sum
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> tail
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> take
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> value
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> view
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> ::
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> AboutLists
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> IndexOutOfBoundsException
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> equal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> filterNot
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> foldLeft
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> head
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> intWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> intercept
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> length
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> println
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> reduceLeft
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> reverse
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> tail
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> to
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> toList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> v
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> AboutLiteralBooleans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> e
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> AboutLiteralNumbers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> convertToDoubleShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> convertToFloatShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> convertToLongShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> e
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> g
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> h
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> AboutLiteralStrings
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> charAt
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> d
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> e
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> refArrayOps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> split
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> stripMargin
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> toInt
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> ::
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> AboutManifests
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Barrel
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Manifest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Monkey
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Nothing
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> T
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> getSimpleName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> inspect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> list
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> m
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> manifest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> monkeyBarrel
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> runtimeClass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> --
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> ->
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> AboutMaps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> Map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> aNewMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> any2ArrowAssoc
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> contains
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> empty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> equals
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> head
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> last
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> lastElement
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> mapValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> mutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> myMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> myMap1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> myMap2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> update
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> values
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> <=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> AboutMethods
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> accumulator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> fact
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> factorial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> foo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> result
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> ++=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> +=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> --=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> -=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> ->
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> AboutMutableMaps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> Map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> any2ArrowAssoc
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> clear
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> contains
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> mutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> myMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> ++=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> +=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> --=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> -=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> AboutMutableSets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> Set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> clear
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> contains
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> mutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> mySet
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> AboutNamedAndDefaultArguments
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> Function2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> WithClassParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> WithClassParametersInClassDefinition
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> WithoutClassParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> addColors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> addColorsWithDefaults
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> blue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> defaultBlue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> defaultGreen
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> defaultRed
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> equal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> f
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> green
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> me
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> myColor
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> red
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> reduce
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$16
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$17
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$18
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$19
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> x$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> <=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> AboutObjects
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Greeting
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Movie
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Person
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> SecretAgent
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Short
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> _99
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> academyAwardBestMoviesForYear
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> bond
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> bruce
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> bullets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> bullets_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> clark
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> count
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> decrementBullets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> deutsch
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> diana
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> english
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> espanol
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> felix
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> get
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> jason
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> magyar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> max
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> n
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> peter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> shoot
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> showMeInnerSecret
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> superheroName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> toInt
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> year
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> z
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> AboutOptions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> Boolean
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> Double
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> NoSuchElementException
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> Option
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> convertToDoubleShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> flag
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> get
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> getOrElse
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> intercept
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> isEmpty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> java
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> maybeItWillReturnSomething
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> noValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> nullValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> someValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> util
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> v
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> value
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> value1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> value2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> AboutParentClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> Assignment
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> Employee
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> Long
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> Worker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> assignment
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> convertToLongShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> employee
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> employeeID
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> firstName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> hours
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> lastName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> me
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> worker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> $anon
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> A1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> AboutPartialFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> B1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> Function1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> PartialFunction
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> addFive
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> andThen
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> doubleEvens
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> orElse
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> printEven
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> printOdd
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> tripleOdds
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> unchecked
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> v1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> whatToDo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> AboutPartiallyAppliedFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> c
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> sum
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> sum3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> sumC
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> +=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> <
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> <=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> AboutPathDependentTypes
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> AbstractFunction2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Board
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Coordinate
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Product
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> ScalaRunTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Serializable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> Statics
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> _toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> b1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> b2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> c1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> c2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> finalizeHash
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> height
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> length
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> mix
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> mutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> occupied
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> require
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> runtime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> typedProductIterator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> ||
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> AboutPatternMatching
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> EatingRegularExpression
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> SittingRegularExpression
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> SleepingRegularExpression
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> _1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> _2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> any2stringadd
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> bear
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> expr
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> foodItem
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> get
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> goldilocks
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> head
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> isEmpty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> j
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> lengthCompare
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> myStuff
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> patternEquals
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> println
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> r
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> secondElement
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> source
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> stripMargin
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> stuff
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> unapplySeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> unary_!
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> xs
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> AboutPreconditions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> WithParameterRequirement
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> ___
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> intercept
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> myInstance
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> myValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> require
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> singleType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> someValue
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> AboutRange
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> Range
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> contains
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> inclusive
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> someNumbers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> <=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> AboutRecursion
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> accumulator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> annotation
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> b
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> fact
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> factorial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> fib
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> fibonacci
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> n
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> tailrec
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> <repeated>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> AboutRepeatedParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> mkString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> repeatedParameterMethod
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> stripMargin
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> z
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> >
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> AboutSequencesAndArrays
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> Array
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> ClassTag
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> IndexedSeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> Seq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> convertToArrayShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> convertToSeqShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> equal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> filtered
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> intArrayOps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> intWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> l
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> length
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> materializeClassTag
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> r
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> refArrayOps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> reverse
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> s
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> to
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> toArray
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> toList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> toSeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> v
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> withFilter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> --
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> AboutSets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> Set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> aNewSet
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> contains
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> diff
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> equals
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> foreach
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> i
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> intersect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> mySet
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> mySet1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> mySet2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> mySet3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> subsetOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> sum
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> union
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> :+
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> AboutTraits
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> AbstractFunction1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Baker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> C1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Event
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> EventListener
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Logging
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> MyListener
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> OurListener
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Product
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> ScalaRunTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Serializable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> T1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> T2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> T3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> Welder
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> _hashCode
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> _toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> bake
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> baker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> event
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> evt
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> listen
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> log
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> logCache
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> logCache_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> mkString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> myListener
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> ne
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> println
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> runtime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> sb
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> toString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> typedProductIterator
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> value
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> w
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> weld
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> welder
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> y
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> z
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> ||
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> !=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> %
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> &&
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> *
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> +
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> ++
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> ->
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> /:
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> :+
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> :\
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> <
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> ==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> >
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> A1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> AboutTraversables
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Array
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> B1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> ClassTag
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Date
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Function1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> IndexedSeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> IntIsIntegral
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Iterable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> MAX_SIZE
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> None
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Nothing
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Numeric
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Option
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Ordering
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> PartialFunction
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Seq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> SeqView
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Stream
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> StringBuilder
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> _1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> _2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> addHistory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> addString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> any2ArrowAssoc
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> append
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> array
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> canBuildFrom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> collect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> collection
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> conforms
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> cons
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToArrayShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToListShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToSeqShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> count
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> drop
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> dropWhile
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> empty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> eq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> evenAndSmallPartial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> exists
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> filterNot
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> find
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> flatMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> flatten
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> foldLeft
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> foldRight
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> forall
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> force
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> foreach
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> getTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> groupBy
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> hasDefiniteSize
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> head
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> headOption
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> history
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> init
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> intArrayOps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> intList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> intWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> isEmpty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> it
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> java
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> language
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> largePartial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> last
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> lastOption
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> list
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> list2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> lst
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> materializeClassTag
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> math
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> max
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> min
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> mkString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> negativePartial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> next element
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> nonEmpty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> num
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> oddAndSmallPartial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> option2Iterable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> orElse
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> partialFunction1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> partialFunction2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> partition
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> postfixOps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> println
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> product
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> reduceLeft
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> reduceLeftEndTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> reduceLeftStartTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> reduceRight
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> reduceRightEndTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> reduceRightStartTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> result
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> result2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> result3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> result4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> running total
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> s
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> size
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> slice
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> span
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> splitAt
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> stream
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> streamer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> stringBuilder
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> stringList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> sum
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> tail
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> take
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> takeWhile
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> to
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toArray
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toIndexedSeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toIterable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toList
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toSeq
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toSet
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> toStream
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> totalReduceLeftTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> totalReduceRightTime
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> transpose
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> unchecked
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> util
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> v
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> view
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> x
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> zeroPartial
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> AboutTuples
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> BigDecimal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> Date
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> _1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> _2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> _5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> animal
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> fruit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> java
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> swap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> tuple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> tuple5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> util
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> ::
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> <
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> A
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> AboutTypeSignatures
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> ClassCastException
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> IntRandomizer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Nil
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Nothing
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Random
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Randomizer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> Short
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> convertToAnyRefShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> convertToAnyShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> convertToShortShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> draw
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> getCanonicalName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> getClass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> getSimpleName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> intRand
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> intRand2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> intercept
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> nextInt
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> rand
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> util
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> zoom
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> A
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> AboutTypeVariance
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Apple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Banana
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Citrus
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Fruit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Manifest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> ManifestFactory
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> MyContainer
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> NavelOrange
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Nothing
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Orange
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Tangelo
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> citrusBasket
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> classType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> contents
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> convertToStringShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> fruitBasket
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> getSimpleName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> item
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> manifest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> orangeBasket
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> orangeBasketReally
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> reflect
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> runtimeClass
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> set
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> singleType
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> tangeloBasket
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> -
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> AboutUniformAccessPrinciple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> CalculatesAgeUsingMethod
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> CalculatesAgeUsingProperty
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> Int
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> __
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> age
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> birthYear
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> currentYear
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> currentYear_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> me
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> AboutValAndVar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> a
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> be
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> convertToIntShouldWrapper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> koan
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> should
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutAsserts
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutByNameParameter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutCaseClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutConstructors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutEmptyValues
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutEnumerations
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutExtractors
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutForExpressions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutFormatting
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutHigherOrderFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutImplicits
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutInfixPrefixAndPostfixOperators
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutInfixTypes
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutIterables
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutLists
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutLiteralBooleans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutLiteralNumbers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutLiteralStrings
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutManifests
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutMaps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutMutableMaps
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutMutableSets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutNamedAndDefaultArguments
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutObjects
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutOptions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutParentClasses
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutPartialFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutPartiallyAppliedFunctions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutPatternMatching
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutPreconditions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutRange
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutRepeatedParameters
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutSequencesAndArrays
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutSets
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutTraits
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutTraversables
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutTuples
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutTypeSignatures
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutTypeVariance
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutUniformAccessPrinciple
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> AboutValAndVar
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Distributor
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Koans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> List
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Master
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Option
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Reporter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Stopper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Suite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Tracker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> configMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> distributor
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> filter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> immutable
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> reporter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> run
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> testName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> tracker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> <byname>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Any
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Event
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Exception
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> FunSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> HasTestNameAndSuiteName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> KoanSuite
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Map
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Master
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Matcher
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> ReportToTheMaster
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Reporter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> ShouldMatchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Stopper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> TestFailed
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> TestIgnored
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> TestPending
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> TestPendingException
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Tracker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> Unit
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> ___
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> _root_
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> apply
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> asInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> configMap
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> event
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> events
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> exceptions
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> failed
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> failed_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> failure
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> fun
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> info
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> isInstanceOf
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> matchers
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> name
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> other
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> package
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> pending
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> qual$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> reporter
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> stripMargin
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> studentFailed
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> studentNeedsToMeditate
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> super$runTest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> test
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> testName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> tracker
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> unary_!
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$1
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$10
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$11
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$12
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$13
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$14
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$15
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$16
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$17
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$18
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$19
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$2
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$20
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$21
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$22
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$3
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$4
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$5
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$6
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$7
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$8
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> x$9
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> <init>
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> AnyRef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> Event
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> HasTestNameAndSuiteName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> Master
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> Predef
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> Stopper
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> String
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> augmentString
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> event
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> events
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> format
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> forscala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> functionalkoans
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> language
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> meditationMessage
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> org
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> reflectiveCalls
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> scala
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> scalatest
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> studentNeedsToMeditate
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> studentNeedsToMeditate_=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> suiteName
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> support
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> testName
product stamps:
668 items
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$4$$anonfun$apply$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$4.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1$$anonfun$apply$mcV$sp$5.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$2$$anonfun$makeFullNamePrettyVersion$1$1$$anonfun$apply$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$2$$anonfun$makeFullNamePrettyVersion$1$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$3$$anonfun$4$$anonfun$apply$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$3$$anonfun$4.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions$$anonfun$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAdvancedOptions.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$1.class -> lastModified(1414624173000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$2.class -> lastModified(1414624173000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$3.class -> lastModified(1414624173000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$4.class -> lastModified(1414624173000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts$$anonfun$5.class -> lastModified(1414624173000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutAsserts.class -> lastModified(1414624173000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$1$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$3$$anonfun$4.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$5$$anonfun$6.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$5$PigLatinizer$2$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter$$anonfun$5.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutByNameParameter.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$1$Person$6.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$1$Person$7$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$2$Person$8.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$2$Person$9$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$3$Dog$11.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$3$Dog$12$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$4$Dog$13.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$4$Dog$14$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$4.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$5$Dog$15.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$5$Dog$16$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$5.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$6$Dog$17.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$6$Dog$18$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$6.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$7$Dog$19.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$7$Dog$20$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$7.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$8.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$$anonfun$9.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$Person$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses$Person.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutCaseClasses.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$$anonfun$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$ClassWithPrivateFields.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$ClassWithValParameter.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses$ClassWithVarParameter.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutClasses.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$AboutClassWithNoClassParameter.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors$AboutConstructorWithAuxiliaryConstructor.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutConstructors.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$10.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$11$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$11$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$11.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$4.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$5.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$6.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$7.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$8$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$8.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues$$anonfun$9.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEmptyValues.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$1$Planets$4$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$1.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$2$GreekPlanets$3$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$2.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$3$Planets$5$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$3.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$4$GreekPlanets$4$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$4.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$5$Planets$6$.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$5$Planets$6$PlanetValue.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations$$anonfun$5.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutEnumerations.class -> lastModified(1414623932000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$1$Employee$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$1$Employee$6$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$2$Car$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$2$ChopShop$4$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$3$Car$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$3$ChopShop$5$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$4$Car$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$4$ChopShop$6$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5$Car$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5$Employee$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5$Tokenizer$2$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$6$Car$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$7$Employee$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$7$Employee$9$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$8$Employee$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$8$Employee$11$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutExtractors.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$1$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$2$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$3$$anonfun$4$$anonfun$apply$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$3$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutForExpressions.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutFormatting.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anon$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anonfun$lambda$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1$$anonfun$lambda2$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$10$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$10$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12$$anonfun$14.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$3$$anonfun$lambda$2$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$4$$anonfun$closure$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$5$$anonfun$closure$2$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$6$$anon$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$7$$anonfun$addWithSyntaxSugar$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$8$$anonfun$addWithSyntaxSugar$2$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9$$anonfun$apply$mcV$sp$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9$$anonfun$makeUpper$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutHigherOrderFunctions.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$1$KoanIntWrapper$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$2$MyPredef$2$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$2$MyPredef$2$KoanIntWrapper.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutImplicits.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$5$Stereo$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1$Loves$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1$Person$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1$Person$6$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2$Loves$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2$Person$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2$Person$8$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInfixTypes.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability$Boat.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutInteroperability.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutIterables.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2$$anonfun$apply$mcV$sp$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$6$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$6$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$8$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$9$$anonfun$org$functionalkoans$forscala$AboutLazySequences$$anonfun$$makeLazy$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLazySequences.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$10$$anonfun$apply$mcV$sp$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$10$$anonfun$apply$mcV$sp$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$11$$anonfun$apply$mcV$sp$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$11$$anonfun$apply$mcV$sp$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$12$$anonfun$apply$mcV$sp$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$12$$anonfun$apply$mcV$sp$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13$$anonfun$apply$mcV$sp$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$14.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$15.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$6$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$7$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$9$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$9$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLists.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralBooleans$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralBooleans.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralNumbers.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutLiteralStrings.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests$$anonfun$2$Barrel$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutManifests.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$14.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMaps.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$6$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMethods.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableMaps.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutMutableSets.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$6$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$6$$anonfun$reduce$default$2$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithClassParameters.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithClassParametersInClassDefinition$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithClassParametersInClassDefinition.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments$WithoutClassParameters.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$1$Greeting$3$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$2$Greeting$4$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$3$Movie$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$3$Movie$3$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutObjects.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$2$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3$$anonfun$apply$mcV$sp$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutOptions.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$1$Employee$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$1$Worker$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$2$Employee$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$2$Worker$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$3$Worker$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4$Employee$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4$Worker$4$Assignment.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4$Worker$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutParentClasses.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$10$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$10$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$9$$anon$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$9$$anon$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartialFunctions.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$1$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$2$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPathDependentTypes$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPathDependentTypes.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPatternMatching.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions$$anonfun$1$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions$WithParameterRequirement.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutPreconditions.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRange.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRecursion.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutRepeatedParameters.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$10$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$3$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$5$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$5$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$8$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$9$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSequencesAndArrays.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$10$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$14.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$15.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutSets.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$Event$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$Event$8$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$EventListener$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1$MyListener$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$Event$10$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$Event$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$EventListener$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$MyListener$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2$OurListener$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$Event$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$Event$12$.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$EventListener$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3$MyListener$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Baker$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Logging$1$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Logging$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4$Welder$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5$C1$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5$T1$2$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5$T1$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$C1$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T1$3$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T1$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T2$2$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6$T2$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$C1$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T1$1$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T2$3$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7$T2$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$C1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T1$4$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T1$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T2$1$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T2$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T3$1$class.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8$T3$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraits.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$10$$anonfun$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$13$$anonfun$79$$anonfun$apply$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$13$$anonfun$79.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$14$$anonfun$80.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$14.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$15$$anonfun$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$15.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$16$$anonfun$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$16$$anonfun$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$16.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$17$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$17.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$18.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$19.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$20.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$21.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$22.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$23.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$24.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$25.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$26.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$27.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$28.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$29.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$30.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$31$$anonfun$81$$anonfun$apply$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$31$$anonfun$81.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$31.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$32.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$33.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$34.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$35.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$36$$anonfun$apply$mcV$sp$2.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$36$$anonfun$apply$mcV$sp$3.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$36.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$37.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$38.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$39.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$40.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$41$$anonfun$org$functionalkoans$forscala$AboutTraversables$$anonfun$$streamer$1$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$41.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$42$$anonfun$org$functionalkoans$forscala$AboutTraversables$$anonfun$$streamer$2$1.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$42.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$43$$anonfun$apply$mcV$sp$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$43.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$44$$anonfun$apply$mcV$sp$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$44.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$45$$anonfun$apply$mcV$sp$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$45.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$46$$anonfun$apply$mcV$sp$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$46.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$47.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$48$$anonfun$49.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$48.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$50$$anonfun$51.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$50.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$4.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$5.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$6.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$7.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52$$anonfun$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$52.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$53$$anonfun$54.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$53.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$55$$anonfun$56.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$55.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$57$$anonfun$58.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$57.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$60.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$61.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$62.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59$$anonfun$63.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$59.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$65.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$66.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$67.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64$$anonfun$68.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$64.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$69$$anonfun$apply$mcV$sp$19.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$69$$anonfun$apply$mcV$sp$8.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$69.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$70$$anonfun$apply$mcV$sp$20.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$70$$anonfun$apply$mcV$sp$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$70.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$71.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$72$$anonfun$apply$mcV$sp$10.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$72$$anonfun$apply$mcV$sp$11.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$72.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$73.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$74.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$75.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$76$$anonfun$apply$mcV$sp$12.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$76.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$13.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$14.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$15.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77$$anonfun$apply$mcV$sp$16.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$77.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$78$$anonfun$apply$mcV$sp$17.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$78$$anonfun$apply$mcV$sp$18.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$78.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables$$anonfun$9.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTraversables.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples$$anonfun$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTuples.class -> lastModified(1414623933000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$3$IntRandomizer$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$3$Randomizer$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$5.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$6$IntRandomizer$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$6$Randomizer$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$6.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$7$IntRandomizer$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$7$Randomizer$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$7.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8$$anonfun$apply$mcV$sp$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8$IntRandomizer$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8$Randomizer$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$8.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures$$anonfun$9.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeSignatures.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$1$MyContainer$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$10$MyContainer$10.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$10.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$2$MyContainer$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$3$MyContainer$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$4$MyContainer$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$5$MyContainer$5.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$5.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$6$MyContainer$6.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$6$NavelOrange$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$6.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$7$MyContainer$7.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$7.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$8$MyContainer$8.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$8.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$9$MyContainer$9.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$$anonfun$9.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Apple.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Banana.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Citrus.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Fruit.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Orange.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance$Tangelo.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutTypeVariance.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$1.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$2.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$3.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$4.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$$anonfun$5.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$CalculatesAgeUsingMethod.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple$CalculatesAgeUsingProperty.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutUniformAccessPrinciple.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutValAndVar$$anonfun$1.class -> lastModified(1414624203000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutValAndVar$$anonfun$2.class -> lastModified(1414624203000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/AboutValAndVar.class -> lastModified(1414624203000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board$.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board$Coordinate$.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board$Coordinate.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Board.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Koans.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Monkey.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Person$.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/Person.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/SecretAgent$.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/SecretAgent.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite$ReportToTheMaster.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite$___.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite$class.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/KoanSuite.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/Master$.class -> lastModified(1414623934000)
/Users/luqi/GitHub/Scala/scalakoansexercises/target/scala-2.10/test-classes/org/functionalkoans/forscala/support/Master.class -> lastModified(1414623934000)
source stamps:
51 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> hash(833c869b553fdcb1d1880f789be2ec624d7be054)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> hash(00ad1588e4e89ed7f74cf976dcf98cd03a380da0)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> hash(0aa7d1175a4cd58e766f2a34c64ad97e076aaffc)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> hash(731a16e6b682c5d5acb18bf4584ad049e9fe52f9)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> hash(6bff85c5c3c21499771b92ee2a9687469c3711e8)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> hash(067407e297b9770de7924cd816f6e6c3a559d49c)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> hash(d844858ab28c1492431f69a6dca4223acc0006e2)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> hash(64417987009f57a87cda861e914481526ba8d50d)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> hash(9fcf56880c284803fb61af281858cf42da44a9c5)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> hash(a4f37aac02594d1899b9acb204af3d73479fb008)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> hash(43cc5dc80c855817f5ae9eb69ba9d3dc06a33d95)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> hash(a8b19883d11d57c17057d421dccc42fa30911ce5)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> hash(83f1c8123c3e543f606f9ff614626ca0f4bcbb81)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> hash(dd602413b70d9c26f27f262934db89c6e9fbabe9)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> hash(1696a96bea872a3084aa408e4f25a1d195ed8afb)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> hash(3d1ca553c0e446b2d94c894490dfa48afb09694e)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> hash(bf3916bb6900bfa561fafe3e9e1aced369fa1795)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> hash(949e5f51306334b071c13de12ba01ad32e4b5e04)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> hash(542d3d323200c9debfbf2eb600c4f4456fe8a5f9)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> hash(17d5146ab023830ba40476e68c30b7c67a5f16cf)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> hash(e8686dc86a25651abc62ebdc74f8cba7d8b0751e)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> hash(0278de8182bb9cbe7f0ff58ae43cb534cac6b9fc)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> hash(131432f56e4a71520381fd31a6a2ebe8f42d4752)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> hash(e47333b2c94f9d07b71870a239aaa3ad4fb61a42)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> hash(38c5bdd0ad5711d831be729892ef5af1c4287357)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> hash(6bcd0e8fcb3f7f1cf4b0692e5f8e3b41c0d7f856)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> hash(0c1887d36cb0e5bd2e73c4437f43e8daaa270774)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> hash(1eb15821422cbd5990d5dd4fe960df0d7ad892c4)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> hash(267b60ba4862812099319f47f01a6f37d813641a)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> hash(7004c063896c110b8dd318cb14e8f7de309fca92)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> hash(43f53943c2575cfb2d3b6f6ce4e734d0f6338f93)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> hash(ae3f2e895da3f97a6f601e05cccf75715f9c151a)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> hash(da795fdc1ac4d72b7bb8a9457a4016e336847bfc)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> hash(5c3603ebe20b612baff137c8c1ad8b5074cfdee0)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> hash(6a52675fed4ad29217b998b0dded84298e81e974)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> hash(616c368150337e344f5c7ab5ff325deb1f27900f)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> hash(910ba3089e325ef9a5e66b3a924bb38c22cccdbb)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> hash(0f180b88cb65679f4f0c09a6d03b763f1a090587)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> hash(4dc609d9f194ca31a2e80fab02594b8afb066a08)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> hash(debeae2bf51f53b60e982aa40a72dc77604e9915)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> hash(7c753aa2d228a9dfa75c74409da63aad92d2c213)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> hash(9cee9d8a37c9909527f1a5b1a995b58a68cebee0)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> hash(2427e9f8699a401ea643d4471d4fecc72e0d9a84)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> hash(3770d9c0cd023489d4fe4bff8e4d4db9eaabcce1)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> hash(c491517f2bd99122779a7cbaf59a36a6ad9edab8)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> hash(1f24bd203aa088aae059ffa4149690f01e9c07d8)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> hash(1ca14d5d091ca040de02d3cc3e1a9532904f7d8a)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> hash(47a9159b80bd3e9ec3620310e40c3f3342e79d7c)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> hash(731bd285abb8d8ff7d1c41edb3a17a16adade66c)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> hash(47a68d5b55433f02159a0c02cd460c0121b9e9c5)
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> hash(13832f894eb4c75bee4985f14cd8fd4f20173ada)
binary stamps:
3 items
/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar -> lastModified(1406753776000)
/Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar -> lastModified(1356202546000)
/Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar -> lastModified(1395179187000)
class names:
3 items
/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/lib/rt.jar -> java.lang.Object
/Users/luqi/.ivy2/cache/org.scalatest/scalatest_2.10/jars/scalatest_2.10-1.9.1.jar -> org.scalatest.matchers.ClassicMatchers
/Users/luqi/.sbt/boot/scala-2.10.4/lib/scala-library.jar -> scala.Int
internal apis:
51 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlFlpwRASfbtoCAAZJAAdhcGlIYXNoWgAIaGFzTWFjcm9MABhfaW50ZXJuYWxPbmx5X25hbWVIYXNoZXN0ACRMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2hlcztMAANhcGl0ABVMeHNidGkvYXBpL1NvdXJjZUFQSTtMAAtjb21waWxhdGlvbnQAF0x4c2J0aS9hcGkvQ29tcGlsYXRpb247WwAEaGFzaHQAAltCeHDGXy0hAHNyACJ4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaGVzVNq+mfrU7EwCAAJbAA9pbXBsaWNpdE1lbWJlcnN0ACNbTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoO1sADnJlZ3VsYXJNZW1iZXJzcQB+AAd4cHVyACNbTHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoO0lagLbdlov0AgAAeHAAAABPc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw1k9fwHQAJ2NvbnZlcnRUcmF2ZXJzYWJsZU1hdGNoZXJUb0FycmF5TWF0Y2hlcnNxAH4AC7a1dHJ0ACFjb252ZXJ0RG91YmxlVG9QbHVzT3JNaW51c1dyYXBwZXJzcQB+AAvdOEmvdAAsY29udmVydEhhc0ludEdldFNpemVGaWVsZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAtnhk7bdAAuY29udmVydEhhc0xvbmdMZW5ndGhGaWVsZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC07u+UJ0AChjb252ZXJ0R2V0TGVuZ3RoRmllbGRUb0xvbmdMZW5ndGhXcmFwcGVyc3EAfgALelTHPXQAGmNvbnZlcnRUb0xvbmdTaG91bGRXcmFwcGVyc3EAfgALS9vOmXQAI2NvbnZlcnRHZXRTaXplRmllbGRUb0ludFNpemVXcmFwcGVyc3EAfgALFMDq9XQAL2NvbnZlcnRTaXplUGFyYW1ldGVybGVzc01ldGhvZFRvTG9uZ1NpemVXcmFwcGVyc3EAfgALfRVQXXQANWNvbnZlcnRHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9JbnRMZW5ndGhXcmFwcGVyc3EAfgALKXxCLXQAIGNvbnZlcnRTaXplRmllbGRUb0ludFNpemVXcmFwcGVyc3EAfgALv1K16nQAKmNvbnZlcnRIYXNMb25nU2l6ZUZpZWxkVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4AC7epDG50ACFjb252ZXJ0U2l6ZU1ldGhvZFRvSW50U2l6ZVdyYXBwZXJzcQB+AAs7baWVdAAvY29udmVydEhhc0xvbmdMZW5ndGhNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAuM/TOddAA7Y29udmVydEhhc0xvbmdHZXRTaXplUGFyYW1ldGVybGVzc01ldGhvZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAv5CpOwdAAfY29udmVydExvbmdUb1BsdXNPck1pbnVzV3JhcHBlcnNxAH4AC/pDYJh0ABpjb252ZXJ0VG9MaXN0U2hvdWxkV3JhcHBlcnNxAH4ACz7+bo90ABdjb252ZXJ0VG9NYXRjaGVyV3JhcHBlcnNxAH4AC6oREAh0AB5jb252ZXJ0SW50VG9QbHVzT3JNaW51c1dyYXBwZXJzcQB+AAt/NOdsdAAbY29udmVydFRvRmxvYXRTaG91bGRXcmFwcGVyc3EAfgALEAWiHHQAKmNvbnZlcnRIYXNJbnRTaXplTWV0aG9kVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4AC3BFovJ0ACVjb252ZXJ0R2V0U2l6ZU1ldGhvZFRvTG9uZ1NpemVXcmFwcGVyc3EAfgALelXmqnQAGWNvbnZlcnRUb0FueVNob3VsZFdyYXBwZXJzcQB+AAvvnbVndAAzY29udmVydExlbmd0aFBhcmFtZXRlcmxlc3NNZXRob2RUb0xvbmdMZW5ndGhXcmFwcGVyc3EAfgALFkRuanQAMWNvbnZlcnRIYXNJbnRHZXRMZW5ndGhNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAvaHur4dAASY29udmVydFRvRXF1YWxpemVyc3EAfgALimXFLXQAJWNvbnZlcnRMZW5ndGhGaWVsZFRvTG9uZ0xlbmd0aFdyYXBwZXJzcQB+AAsr/wOBdAApY29udmVydEdldExlbmd0aE1ldGhvZFRvTG9uZ0xlbmd0aFdyYXBwZXJzcQB+AAvxy1Y3dAApY29udmVydEhhc0ludFNpemVGaWVsZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAsT66pWdAAdY29udmVydFRvSmF2YU1hcFNob3VsZFdyYXBwZXJzcQB+AAuzECYWdAAmY29udmVydExlbmd0aE1ldGhvZFRvTG9uZ0xlbmd0aFdyYXBwZXJzcQB+AAsZKpSkdAAuY29udmVydFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9JbnRTaXplV3JhcHBlcnNxAH4ACwWXNuN0ADtjb252ZXJ0SGFzSW50UGFyYW1ldGVybGVzc0xlbmd0aE1ldGhvZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC+Q4BZp0ACRjb252ZXJ0TGVuZ3RoRmllbGRUb0ludExlbmd0aFdyYXBwZXJzcQB+AAvfQgFydAAxY29udmVydEdldFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9JbnRTaXplV3JhcHBlcnNxAH4AC1/o1/10AC5jb252ZXJ0SGFzTG9uZ0dldFNpemVNZXRob2RUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALqY7MuHQABGluZm9zcQB+AAvWulJXdAA3Y29udmVydEhhc0ludFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4AC8KLcm90ADBjb252ZXJ0SGFzSW50R2V0TGVuZ3RoRmllbGRUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAvDvpY1dAA6Y29udmVydEhhc0ludEdldFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4ACxe9rzJ0ACtjb252ZXJ0VG9FdmFsdWF0aW5nQXBwbGljYXRpb25TaG91bGRXcmFwcGVyc3EAfgALoeCn5HQAPmNvbnZlcnRIYXNJbnRHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9MZW5ndGhTaG91bGRXcmFwcGVyc3EAfgALZLfA0HQAIWNvbnZlcnRTaXplRmllbGRUb0xvbmdTaXplV3JhcHBlcnNxAH4AC5nzHDV0ADJjb252ZXJ0TGVuZ3RoUGFyYW1ldGVybGVzc01ldGhvZFRvSW50TGVuZ3RoV3JhcHBlcnNxAH4AC/2nMBt0ABxjb252ZXJ0VG9Eb3VibGVTaG91bGRXcmFwcGVyc3EAfgALvX9KWHQAImNvbnZlcnRTaXplTWV0aG9kVG9Mb25nU2l6ZVdyYXBwZXJzcQB+AAvGN1bjdAAbY29udmVydFRvU2hvcnRTaG91bGRXcmFwcGVyc3EAfgAL+KJoO3QAH2NvbnZlcnRCeXRlVG9QbHVzT3JNaW51c1dyYXBwZXJzcQB+AAs2WD0gdAA/Y29udmVydEhhc0xvbmdHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9MZW5ndGhTaG91bGRXcmFwcGVyc3EAfgALD88PTnQALWNvbnZlcnRIYXNJbnRMZW5ndGhGaWVsZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC3aqS1Z0ACRjb252ZXJ0VG9KYXZhQ29sbGVjdGlvblNob3VsZFdyYXBwZXJzcQB+AAsDtV9ndAAZY29udmVydFRvTWFwU2hvdWxkV3JhcHBlcnNxAH4AC0LgUMt0ACVjb252ZXJ0TGVuZ3RoTWV0aG9kVG9JbnRMZW5ndGhXcmFwcGVyc3EAfgALqqVWL3QAK2NvbnZlcnRIYXNMb25nU2l6ZU1ldGhvZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAsNVJsldAAuY29udmVydEhhc0ludExlbmd0aE1ldGhvZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC5k5xPZ0ACFjb252ZXJ0TWFwTWF0Y2hlclRvSmF2YU1hcE1hdGNoZXJzcQB+AAu4ME4ZdAAkY29udmVydEdldFNpemVNZXRob2RUb0ludFNpemVXcmFwcGVyc3EAfgALbJwNMnQANmNvbnZlcnRHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9Mb25nTGVuZ3RoV3JhcHBlcnNxAH4AC30wQGJ0ABljb252ZXJ0VG9TZXFTaG91bGRXcmFwcGVyc3EAfgALeV6xwnQAIGNvbnZlcnRGbG9hdFRvUGx1c09yTWludXNXcmFwcGVyc3EAfgALJZqg4XQAKGNvbnZlcnRHZXRMZW5ndGhNZXRob2RUb0ludExlbmd0aFdyYXBwZXJzcQB+AAstBvhtdAAtY29udmVydEhhc0xvbmdHZXRTaXplRmllbGRUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALD8zE5HQAOGNvbnZlcnRIYXNMb25nU2l6ZVBhcmFtZXRlcmxlc3NNZXRob2RUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALEc5hunQAHGNvbnZlcnRUb1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAtrWl4cdAArY29udmVydFN5bWJvbFRvSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4AC5ahVk90ABxjb252ZXJ0VG9BbnlSZWZTaG91bGRXcmFwcGVyc3EAfgALPNkt6XQAMWNvbnZlcnRIYXNMb25nR2V0TGVuZ3RoRmllbGRUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAucbbM+dAAyY29udmVydEhhc0xvbmdHZXRMZW5ndGhNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAvc089LdAAyY29udmVydEdldFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9Mb25nU2l6ZVdyYXBwZXJzcQB+AAv/bw8XdAAwY29udmVydFRyYXZlcnNhYmxlTWF0Y2hlclRvSmF2YUNvbGxlY3Rpb25NYXRjaGVyc3EAfgALsuz13HQAHmNvbnZlcnRUb0phdmFMaXN0U2hvdWxkV3JhcHBlcnNxAH4AC94ZG/h0ADxjb252ZXJ0SGFzTG9uZ0xlbmd0aFBhcmFtZXRlcmxlc3NNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAvLobLJdAAtY29udmVydEhhc0ludEdldFNpemVNZXRob2RUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALvcLra3QAJ2NvbnZlcnRHZXRMZW5ndGhGaWVsZFRvSW50TGVuZ3RoV3JhcHBlcnNxAH4ACwggcQ50ABljb252ZXJ0VG9JbnRTaG91bGRXcmFwcGVyc3EAfgALycC1unQAGmNvbnZlcnRUb0J5dGVTaG91bGRXcmFwcGVyc3EAfgALvA9vdHQAG2NvbnZlcnRUb0FycmF5U2hvdWxkV3JhcHBlcnNxAH4AC8RAS3N0ACBjb252ZXJ0U2hvcnRUb1BsdXNPck1pbnVzV3JhcHBlcnNxAH4AC2UJss10ACRjb252ZXJ0R2V0U2l6ZUZpZWxkVG9Mb25nU2l6ZVdyYXBwZXJzcQB+AAtqM+EDdAAhY29udmVydFRvVHJhdmVyc2FibGVTaG91bGRXcmFwcGVydXEAfgAJAAABFXNxAH4AC6GOajR0AAZhc3NlcnRzcQB+AAsjzhZEdAAaUmVzdWx0T2ZMZXNzVGhhbkNvbXBhcmlzb25zcQB+AAuVAqOMdAAeUmVzdWx0T2ZTdGFydFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALaiLpqnQAFVJlc3VsdE9mTm90V29yZEZvclNlcXNxAH4ACyWUzO50AAh0ZXN0TmFtZXNxAH4AC0Kp/xZ0ABFnZXRSdW5UZXN0R29vZGllc3NxAH4AC+yaNRN0ABBPckZ1bGx5TWF0Y2hXb3Jkc3EAfgAL81HYiHQABm5vdGlmeXNxAH4ACyK9o7N0AAdmYWlsdXJlc3EAfgALXh4enXQAIFJlc3VsdE9mSGF2ZVdvcmRGb3JMZW5ndGhXcmFwcGVyc3EAfgALOl8enHQAB3VuYXBwbHlzcQB+AAu2ZkCMdAAFcmVnZXhzcQB+AAtXm9WNdAAGQW5Xb3Jkc3EAfgALN3V5gnQAC0NvbnRhaW5Xb3Jkc3EAfgALiAL/AXQAB3Byb2R1Y2VzcQB+AAswyYlBdAAHY3VycmllZHNxAH4ACxPYnKp0AB9SZXN1bHRPZk5vdFdvcmRGb3JMZW5ndGhXcmFwcGVyc3EAfgALkqO3rHQAAl9fc3EAfgALf26oZXQABHRlc3RzcQB+AAuB2randAARZXhlY3V0ZSRkZWZhdWx0JDJzcQB+AAslk3ukdAAMZXhwZWN0UmVzdWx0c3EAfgALxPeak3QACWludGVyY2VwdHNxAH4ACxkdwvh0AB1SZXN1bHRPZk5vdFdvcmRGb3JUcmF2ZXJzYWJsZXNxAH4AC881MsZ0AARmYWlsc3EAfgALnnkNDHQAG1Jlc3VsdE9mSGF2ZVdvcmRGb3JKYXZhTGlzdHNxAH4AC0Z8qyd0AARuYW1lc3EAfgALKLgWk3QADGV4cGVjdGVkU2l6ZXNxAH4AC9Bx0aF0ABxIYXZlUHJvcGVydHlNYXRjaGVyR2VuZXJhdG9yc3EAfgALNgbvJXQAE0RvdWJsZVNob3VsZFdyYXBwZXJzcQB+AAu6EPLcdAAHTm90V29yZHNxAH4AC4d6D6V0AApMZW5ndGhXb3Jkc3EAfgALmm1GrnQABUFXb3Jkc3EAfgAL0XiBpnQAD3ByaW50U3RhY2tUcmFjZXNxAH4AC4GJolF0AARoYXZlc3EAfgAL1xhc9HQAEWV4ZWN1dGUkZGVmYXVsdCQ0c3EAfgALCr5V43QACU9yTm90V29yZHNxAH4AC9KgMuZ0ABNnZXRMb2NhbGl6ZWRNZXNzYWdlc3EAfgALlxMHG3QAB2V4ZWN1dGVzcQB+AAtMc49KdAAEd2FpdHNxAH4ACwVpbPZ0ABpSZXN1bHRPZkhhdmVXb3JkRm9ySmF2YU1hcHNxAH4AC6pIVcN0AA9hcHBseSRkZWZhdWx0JDRzcQB+AAvoNJuNdAACPD1zcQB+AAsxoiGhdAAJc3R5bGVOYW1lc3EAfgAL7uqNHHQADlNob3J0VG9sZXJhbmNlc3EAfgALNFulHHQAEEFuZFN0YXJ0V2l0aFdvcmRzcQB+AAv7fWB7dAAOY29weSRkZWZhdWx0JDJzcQB+AAv+RnBAdAAISGF2ZVdvcmRzcQB+AAswgVRhdAANJGFzSW5zdGFuY2VPZnNxAH4AC3e+W1d0AA5NYXRjaGVyV3JhcHBlcnNxAH4ACxwA/2R0AAlzdGFydFdpdGhzcQB+AAtVJbmvdAAEc2l6ZXNxAH4AC1hhqNt0ABFleGVjdXRlJGRlZmF1bHQkM3NxAH4AC7d3k/d0AAdjb21wb3Nlc3EAfgALKO43ynQADUxlbmd0aFdyYXBwZXJzcQB+AAupfvR/dAAMSW50VG9sZXJhbmNlc3EAfgALr7dSqXQABWNsYXp6c3EAfgALbB+8SnQAEkZsb2F0U2hvdWxkV3JhcHBlcnNxAH4ACycJYO90ABxSZXN1bHRPZlJlZ2V4V29yZEFwcGxpY2F0aW9uc3EAfgALv5G86nQAEkFycmF5U2hvdWxkV3JhcHBlcnNxAH4ACwfX8/J0AAljb25maWdNYXBzcQB+AAuwB/fAdAAXd3JhcFJlcG9ydGVySWZOZWNlc3NhcnlzcQB+AAsXaAa/dAAMcHJvZHVjdEFyaXR5c3EAfgALRcJA+XQAHG1hdGNoU3ltYm9sVG9QcmVkaWNhdGVNZXRob2RzcQB+AAv74B0qdAAJVmFsdWVXb3Jkc3EAfgALobNeDHQABmVxdWFsc3NxAH4ACyq0GNd0AA1zdXBlciRydW5UZXN0c3EAfgAL/LnnU3QAEUxpc3RTaG91bGRXcmFwcGVyc3EAfgALcURrE3QAFGdldE1ldGhvZEZvclRlc3ROYW1lc3EAfgALGzV/2HQAHVJlc3VsdE9mTm90V29yZEZvclNpemVXcmFwcGVyc3EAfgALSs2UjnQAGVJlc3VsdE9mUHJvZHVjZUludm9jYXRpb25zcQB+AAtgA9k9dAAZUmVzdWx0T2ZIYXZlV29yZEZvclN0cmluZ3NxAH4ACwCA/xt0ABBoYW5kbGVGYWlsZWRUZXN0c3EAfgALEEWG2HQAEGZpbGxJblN0YWNrVHJhY2VzcQB+AAuLiw+xdAAJdG9sZXJhbmNlc3EAfgALOzevjHQADWV4cGVjdGVkVmFsdWVzcQB+AAtM37jvdAAYVHJhdmVyc2FibGVTaG91bGRXcmFwcGVyc3EAfgAL35hHKnQAG1Jlc3VsdE9mU2l6ZVdvcmRBcHBsaWNhdGlvbnNxAH4ACw6x3Wh0AAhPckJlV29yZHNxAH4AC9sE3c50AAlpbml0Q2F1c2VzcQB+AAuMu1P5dAAcUmVzdWx0T2ZFbmRXaXRoV29yZEZvclN0cmluZ3NxAH4ACxCliF10AApBbmROb3RXb3Jkc3EAfgALKt55onQADU9ySW5jbHVkZVdvcmRzcQB+AAvf2gqIdAAJQW5kQmVXb3Jkc3EAfgALXuN74nQABHRhZ3NzcQB+AAtSd7K0dAAEa29hbnNxAH4AC62J7gl0ABpSZXN1bHRPZktleVdvcmRBcHBsaWNhdGlvbnNxAH4AC0DPecV0AAxhc0luc3RhbmNlT2ZzcQB+AAuu7b++dAAVUmVzdWx0T2ZOb3RXb3JkRm9yTWFwc3EAfgALdFsf7HQAATxzcQB+AAv5Fk3SdAAiRXZhbHVhdGluZ0FwcGxpY2F0aW9uU2hvdWxkV3JhcHBlcnNxAH4AC4KRFZF0AANydW5zcQB+AAuYye0+dAAYRG91YmxlUGx1c09yTWludXNXcmFwcGVyc3EAfgALtSDmwnQACXN1cGVyJHJ1bnNxAH4AC9cdPot0AA5leHBlY3RlZExlbmd0aHNxAH4AC7ihWBd0ABpSZXN1bHRPZk5vdFdvcmRGb3JKYXZhTGlzdHNxAH4ACw0QiwR0AA5GbG9hdFRvbGVyYW5jZXNxAH4AC+zJPtV0AAxzeW5jaHJvbml6ZWRzcQB+AAsXOIJmdAANTG9uZ1RvbGVyYW5jZXNxAH4ACzG1UO90ABhSZXN1bHRPZk5vdFdvcmRGb3JEb3VibGVzcQB+AAsefOhqdAAKZXZhbHVhdGluZ3NxAH4AC9snZjh0AAdLZXlXb3Jkc3EAfgAL1vA5HnQADXNob3VsZE1hdGNoZXJzcQB+AAuVEHgNdAAGZmFpbGVkc3EAfgALV6/3DHQAAWFzcQB+AAs6rISFdAANJGlzSW5zdGFuY2VPZnNxAH4AC5ujCMh0AA1CeXRlVG9sZXJhbmNlc3EAfgALLH4WhXQAB2FuZFRoZW5zcQB+AAv+WAG6dAAPYXBwbHkkZGVmYXVsdCQzc3EAfgAL0G3vEnQACGdldENhdXNlc3EAfgALLJ7Pe3QAEDxpbml0PiRkZWZhdWx0JDRzcQB+AAu2bD05dAACPj1zcQB+AAtj8jdIdAAGdHVwbGVkc3EAfgAL+ZpwpnQAFUludFBsdXNPck1pbnVzV3JhcHBlcnNxAH4AC2WHGTB0AA5BbmRFbmRXaXRoV29yZHNxAH4AC6kygcx0AAtwbHVzT3JNaW51c3NxAH4AC19Maud0ABBJbnRTaG91bGRXcmFwcGVyc3EAfgALqV4j1XQAFVJlc3VsdE9mTm90V29yZEZvckludHNxAH4AC+RHUih0AAhjYW5FcXVhbHNxAH4AC8i/mU10AA5BbmRDb250YWluV29yZHNxAH4ACyAABoB0AAdjb250YWluc3EAfgAL2VgMA3QAD1Jlc3VsdE9mTm90V29yZHNxAH4ACwhxVKx0AAJvcnNxAH4AC7UO9Wt0AA5jb3B5JGRlZmF1bHQkNHNxAH4AC+ISctd0ABZSZXN1bHRPZk5vdFdvcmRGb3JMb25nc3EAfgALc6xSYnQAF1Jlc3VsdE9mTm90V29yZEZvckZsb2F0c3EAfgALuVLB+3QAEWV4ZWN1dGUkZGVmYXVsdCQ3c3EAfgALkDOQg3QAEXRoZVNhbWVJbnN0YW5jZUFzc3EAfgALgSzMHnQADXByb2R1Y3RQcmVmaXhzcQB+AAuM+F2bdAATTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC1Xel/50AARsYXN0c3EAfgALKwbcBHQAA2FnZXNxAH4AC6m4R3x0ACBSZXN1bHRPZk5vdFdvcmRGb3JKYXZhQ29sbGVjdGlvbnNxAH4AC3wtfFh0AAlnZXRMZW5ndGhzcQB+AAsB3jpIdAAJbm90aWZ5QWxsc3EAfgAL3t8zRXQAC3JlYWRSZXNvbHZlc3EAfgALq5RaRXQAC3dpdGhGaXh0dXJlc3EAfgALxTxILnQAF1Jlc3VsdE9mTm90V29yZEZvclNob3J0c3EAfgALAA6TmHQAB3J1blRlc3RzcQB+AAtZElesdAAUSmF2YU1hcFNob3VsZFdyYXBwZXJzcQB+AAtduA/PdAASU2hvdWxkTWV0aG9kSGVscGVyc3EAfgALtwtxDXQAA2tleXNxAH4AC0isEpN0AAxpc0luc3RhbmNlT2ZzcQB+AAuoTtntdAAId2l0aENsdWVzcQB+AAsqW79FdAARZXhlY3V0ZSRkZWZhdWx0JDZzcQB+AAunA4cndAAWZ2V0U3VpdGVSdW5UZXN0R29vZGllc3NxAH4AC2pnEMZ0AA1nZXRTdGFja1RyYWNlc3EAfgALCvHvJnQAFGdldFN0YWNrVHJhY2VFbGVtZW50c3EAfgALfbQx43QAEFNlcVNob3VsZFdyYXBwZXJzcQB+AAvD/W1JdAAXUmVzdWx0T2ZOb3RXb3JkRm9yQXJyYXlzcQB+AAvuPQf3dAAcUmVzdWx0T2ZWYWx1ZVdvcmRBcHBsaWNhdGlvbnNxAH4AC71pFw10ABA8aW5pdD4kZGVmYXVsdCQzc3EAfgAL+1y5M3QAC0FuZEhhdmVXb3Jkc3EAfgALSW4MlHQAGFJlc3VsdE9mSGF2ZVdvcmRGb3JBcnJheXNxAH4AC+U5Wi10AApPckhhdmVXb3Jkc3EAfgAL+Zym4HQABnN5bWJvbHNxAH4AC6bIO6J0ACZSZXN1bHRPZkdyZWF0ZXJUaGFuT3JFcXVhbFRvQ29tcGFyaXNvbnNxAH4AC7rX+eJ0ABlSZXN1bHRPZk5vdFdvcmRGb3JKYXZhTWFwc3EAfgALDoUjR3QALFJlc3VsdE9mQW5Xb3JkVG9CZVByb3BlcnR5TWF0Y2hlckFwcGxpY2F0aW9uc3EAfgALp7L4k3QABjxpbml0PnNxAH4AC0Dw2jZ0AA9ydW5OZXN0ZWRTdWl0ZXNzcQB+AAts0F69dAAXUmVzdWx0T2ZCZVdvcmRGb3JBbnlSZWZzcQB+AAsEfNStdAAKZ2V0TWVzc2FnZXNxAH4AC+Y63nR0AANfX19zcQB+AAssjrsCdAANc2V0U3RhY2tUcmFjZXNxAH4AC6CQxsB0ABdGbG9hdFBsdXNPck1pbnVzV3JhcHBlcnNxAH4AC6u677B0ABFTaXplU2hvdWxkV3JhcHBlcnNxAH4ACwSi5TN0AAVlcXVhbHNxAH4AC91wI/h0ACtSZXN1bHRPZkFXb3JkVG9CZVByb3BlcnR5TWF0Y2hlckFwcGxpY2F0aW9uc3EAfgALG3M4DXQAHVJlc3VsdE9mR3JlYXRlclRoYW5Db21wYXJpc29uc3EAfgALOyOtMXQABlBlcnNvbnNxAH4AC2+gEsx0AAVhcHBseXNxAH4AC9I8rAd0AA1nZXRTdXBwcmVzc2Vkc3EAfgAL2QYCc3QACUVxdWFsaXplcnNxAH4AC8BKMF50ABVKYXZhTGlzdFNob3VsZFdyYXBwZXJzcQB+AAvbUmUKdAANT3JFbmRXaXRoV29yZHNxAH4ACyNNJpJ0ABtuZXdBc3NlcnRpb25GYWlsZWRFeGNlcHRpb25zcQB+AAv2zFrRdAARUmVwb3J0VG9UaGVNYXN0ZXJzcQB+AAtg83PUdAACPT1zcQB+AAvTXXRVdAAkUmVzdWx0T2ZUaGVTYW1lSW5zdGFuY2VBc0FwcGxpY2F0aW9uc3EAfgALmQ8clXQAE0FueVJlZlNob3VsZFdyYXBwZXJzcQB+AAu03FVIdAAORnVsbHlNYXRjaFdvcmRzcQB+AAsh1U2LdAASZ2V0U3RhY2tUcmFjZURlcHRoc3EAfgALiqk1lHQACmZ1bGx5TWF0Y2hzcQB+AAtU8tImdAAFY2xvbmVzcQB+AAuTEBPMdAATU3RyaW5nU2hvdWxkV3JhcHBlcnNxAH4ACyygY890AAZleHBlY3RzcQB+AAuO+4ZwdAAGc2hvdWxkc3EAfgALVS9oK3QADWFkZFN1cHByZXNzZWRzcQB+AAu956YTdAAeUmVzdWx0T2ZIYXZlV29yZEZvclRyYXZlcnNhYmxlc3EAfgALIZf5O3QAC0VuZFdpdGhXb3Jkc3EAfgAL2GRq83QAEEFueVNob3VsZFdyYXBwZXJzcQB+AAu1WmB2dAADbm90c3EAfgALoxs1/XQAHlJlc3VsdE9mSGF2ZVdvcmRGb3JTaXplV3JhcHBlcnNxAH4AC+RfD+Z0AAxuZXN0ZWRTdWl0ZXNzcQB+AAu3ZI7jdAAIbWVkaXRhdGVzcQB+AAu9rXtvdAADZnVuc3EAfgALlsTD73QADkFuZEluY2x1ZGVXb3Jkc3EAfgALF4eNAHQAC2V4cGVjdGVkS2V5c3EAfgALz8LtcXQAG0phdmFDb2xsZWN0aW9uU2hvdWxkV3JhcHBlcnNxAH4AC39R4lJ0AAVmaXJzdHNxAH4AC6MNu0R0AAdpbmNsdWRlc3EAfgALxrYos3QAFlJlc3VsdE9mSGF2ZVdvcmRGb3JTZXFzcQB+AAtXhK5WdAAPRG91YmxlVG9sZXJhbmNlc3EAfgALOQiJxXQAH1Jlc3VsdE9mVHJpcGxlRXF1YWxzQXBwbGljYXRpb25zcQB+AAvLyTtLdAARZXhlY3V0ZSRkZWZhdWx0JDVzcQB+AAuxG6kTdAAgbmV3VGVzdEZhaWxlZEV4Y2VwdGlvbiRkZWZhdWx0JDJzcQB+AAvJqAzadAAOY29weSRkZWZhdWx0JDNzcQB+AAuNANlVdAAPZXhwZWN0ZWRFbGVtZW50c3EAfgAL1FBT8HQAEUFuZEZ1bGx5TWF0Y2hXb3Jkc3EAfgALPEzA53QAEWJlUHJvcGVydHlNYXRjaGVyc3EAfgALy4ne1HQABGNvcHlzcQB+AAu+x9SrdAAYUmVzdWx0T2ZOb3RXb3JkRm9yQW55UmVmc3EAfgALqCYKbXQAAz09PXNxAH4AC3ZePTV0ACFSZXN1bHRPZkhhdmVXb3JkRm9ySmF2YUNvbGxlY3Rpb25zcQB+AAujYoZZdAAIdG9TdHJpbmdzcQB+AAtjsXvGdAAJdGVzdE5hbWVzc3EAfgALPh0COXQAAmFuc3EAfgALyZ5ktXQABmxlbmd0aHNxAH4AC34wP1t0ABFleGVjdXRlJGRlZmF1bHQkMXNxAH4AC1zQJFl0ABlSZXN1bHRPZkNvbnRhaW5Xb3JkRm9yTWFwc3EAfgAL7I2603QAAmJlc3EAfgALVr8jinQAElNob3J0U2hvdWxkV3JhcHBlcnNxAH4AC1OuYI10AAIhPXNxAH4ACxo3JR10AB9SZXN1bHRPZkZ1bGx5TWF0Y2hXb3JkRm9yU3RyaW5nc3EAfgALmDUr53QAFlJlc3VsdE9mTm90V29yZEZvckJ5dGVzcQB+AAslAZdgdAAIZ2V0Q2xhc3NzcQB+AAsc7utzdAARTG9uZ1Nob3VsZFdyYXBwZXJzcQB+AAss0wFVdAAHZ2V0U2l6ZXNxAH4AC746ECR0AAhTaXplV29yZHNxAH4AC7p/mOV0AAh0ZXN0c0ZvcnNxAH4AC/k6fjR0AA5jb3B5JGRlZmF1bHQkMXNxAH4AC3R7kY90AAhydW5UZXN0c3NxAH4AC2vjKsN0AA1PckNvbnRhaW5Xb3Jkc3EAfgALoTXm0nQAD09yU3RhcnRXaXRoV29yZHNxAH4AC6rKMmh0ABhSZXN1bHRPZk5vdFdvcmRGb3JTdHJpbmdzcQB+AAuMSZv0dAARcGVuZGluZ1VudGlsRml4ZWRzcQB+AAsN09FddAAXVGhlU2FtZUluc3RhbmNlQXNQaHJhc2VzcQB+AAsz1hXZdAAQTWFwU2hvdWxkV3JhcHBlcnNxAH4ACyYPFYl0ABFleHBlY3RlZFRlc3RDb3VudHNxAH4AC/B/fzJ0AAdlbmRXaXRoc3EAfgALVM17P3QACVJlZ2V4V29yZHNxAH4AC8+67tp0ABZCeXRlUGx1c09yTWludXNXcmFwcGVyc3EAfgALm7EFJHQAAm5lc3EAfgALa5buLHQAIVJlc3VsdE9mQW5Xb3JkVG9TeW1ib2xBcHBsaWNhdGlvbnNxAH4AC+hqmIp0AAtJbmNsdWRlV29yZHNxAH4AC2mt9Yp0ABZMb25nUGx1c09yTWludXNXcmFwcGVyc3EAfgALDmdgenQAHVJlc3VsdE9mRXZhbHVhdGluZ0FwcGxpY2F0aW9uc3EAfgALGoA+4nQAB3BlbmRpbmdzcQB+AAv1W+cwdAAFdmFsdWVzcQB+AAsSTH3KdAAGaWdub3Jlc3EAfgALBvwoI3QAHFJlc3VsdE9mSW5jbHVkZVdvcmRGb3JTdHJpbmdzcQB+AAs4H/D8dAAGQmVXb3Jkc3EAfgALz2F7dHQAHVJlc3VsdE9mTGVuZ3RoV29yZEFwcGxpY2F0aW9uc3EAfgALJn7dXHQAAmVxc3EAfgALMfALaHQAD3Byb2R1Y3RJdGVyYXRvcnNxAH4AC3gjJv50AANhbmRzcQB+AAtBaV8+dAARQnl0ZVNob3VsZFdyYXBwZXJzcQB+AAsH8AVCdAAJTm9BcmdUZXN0c3EAfgALVuXr2XQAC1NpemVXcmFwcGVyc3EAfgALzsiZBHQAAT5zcQB+AAs9kgbcdAAFcmlnaHRzcQB+AAsTXbeUdAACIyNzcQB+AAu4sycTdAAGZW5naW5lc3EAfgAL8MazSnQAGlN0cmluZ1Nob3VsZFdyYXBwZXJGb3JWZXJic3EAfgALQsgIy3QACGZpbmFsaXplc3EAfgALTpnVTHQAFm5ld1Rlc3RGYWlsZWRFeGNlcHRpb25zcQB+AAvg+UwUdAAOcHJvZHVjdEVsZW1lbnRzcQB+AAvfpVe4dAAIaGFzaENvZGVzcQB+AAslQ4zLdAAeUmVzdWx0T2ZFbGVtZW50V29yZEFwcGxpY2F0aW9uc3EAfgALiOZ7DnQAIFJlc3VsdE9mQVdvcmRUb1N5bWJvbEFwcGxpY2F0aW9uc3EAfgALhe7kyHQACXN1aXRlTmFtZXNxAH4AC1qLtsV0ACNSZXN1bHRPZkxlc3NUaGFuT3JFcXVhbFRvQ29tcGFyaXNvbnNxAH4AC2lNsQZ0ABBBYm91dENhc2VDbGFzc2Vzc3EAfgALieBYgXQAHVJlc3VsdE9mQ29udGFpbldvcmRGb3JKYXZhTWFwc3EAfgALC0GHKHQADVN0YXJ0V2l0aFdvcmRzcQB+AAvZ6BdEdAADc3Nuc3EAfgALepAbT3QAF1Nob3J0UGx1c09yTWludXNXcmFwcGVyc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4C33hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzxxETIWmc3CQCAAFCAAVmbGFnc3hwAHQALW9yZy5mdW5jdGlvbmFsa29hbnMuZm9yc2NhbGEuQWJvdXRDYXNlQ2xhc3Nlc3VyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQACENsYXNzRGVmdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQAEHNjYWxhLmRlcHJlY2F0ZWRzcgATeHNidGkuU2FmZUxhenkkSW1wbFACLpOXl0A/AgADWgAIYml0bWFwJDBMAAJfdHQAEkxqYXZhL2xhbmcvT2JqZWN0O0wABGV2YWx0ABFMc2NhbGEvRnVuY3Rpb24wO3hyABZ4c2J0aS5hcGkuQWJzdHJhY3RMYXp503e1AV+756ACAAB4cABwc3IAIHhzYnRpLlNhZmVMYXp5JCRhbm9uZnVuJHN0cmljdCQxAAAAAAAAAAACAAFMAAd2YWx1ZSQxcQB+Avl4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AvgBc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+At9MAAlpbmhlcml0ZWRxAH4C30wAB3BhcmVudHNxAH4C33hxAH4DAXNxAH4C+AF1cQB+AtoAAAAAcHNxAH4C+AF1cQB+AtoAAAAAcHNxAH4C+AF1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAADHNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADEwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AwB0AAlLb2FuU3VpdGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AwBzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAVzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgAMeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQAA29yZ3NxAH4DGXQAD2Z1bmN0aW9uYWxrb2Fuc3NxAH4DGXQACGZvcnNjYWxhc3EAfgMZdAAHc3VwcG9ydHNyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgMac3EAfgMNdAAOU2hvdWxkTWF0Y2hlcnNzcQB+AxFzcQB+AxR1cQB+AxcAAAAEc3EAfgMZdAADb3Jnc3EAfgMZdAAJc2NhbGF0ZXN0c3EAfgMZdAAIbWF0Y2hlcnNxAH4DJHNxAH4DDXQAClNob3VsZFZlcmJzcQB+AxFzcQB+AxR1cQB+AxcAAAAEc3EAfgMZdAADb3Jnc3EAfgMZdAAJc2NhbGF0ZXN0c3EAfgMZdAAEdmVyYnEAfgMkc3EAfgMNdAAITWF0Y2hlcnNxAH4DJ3NxAH4DDXQAD0NsYXNzaWNNYXRjaGVyc3EAfgMnc3EAfgMNdAAIRnVuU3VpdGVzcQB+AxFzcQB+AxR1cQB+AxcAAAADc3EAfgMZdAADb3Jnc3EAfgMZdAAJc2NhbGF0ZXN0cQB+AyRzcQB+Aw10AAVTdWl0ZXEAfgNBc3EAfgMNdAAMU2VyaWFsaXphYmxlc3EAfgMRc3EAfgMUdXEAfgMXAAAAA3NxAH4DGXQABGphdmFzcQB+Axl0AAJpb3EAfgMkc3EAfgMNdAANQWJzdHJhY3RTdWl0ZXEAfgNBc3EAfgMNdAAKQXNzZXJ0aW9uc3EAfgNBc3EAfgMNdAAGT2JqZWN0c3EAfgMRc3EAfgMUdXEAfgMXAAAAA3NxAH4DGXEAfgNQc3EAfgMZdAAEbGFuZ3EAfgMkc3EAfgMNdAADQW55c3EAfgMRc3EAfgMUdXEAfgMXAAAAAnNxAH4DGXQABXNjYWxhcQB+AyRwcHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AAx4cHQAHG9yZy5mdW5jdGlvbmFsa29hbnMuZm9yc2NhbGFzcQB+A2h0ABNvcmcuZnVuY3Rpb25hbGtvYW5zc3EAfgNodAADb3Jnc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFJXifhVXVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADEwAD3NvdXJjZURpcmVjdG9yeXEAfgAMeHB0AEsvVXNlcnMvbHVxaS9HaXRIdWIvU2NhbGEvc2NhbGFrb2Fuc2V4ZXJjaXNlcy90YXJnZXQvc2NhbGEtMi4xMC90ZXN0LWNsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRzGhbmtoLF1ayxi/RYStBJ6f5S+Q==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlFlpwRASfbtoCAAZJAAdhcGlIYXNoWgAIaGFzTWFjcm9MABhfaW50ZXJuYWxPbmx5X25hbWVIYXNoZXN0ACRMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2hlcztMAANhcGl0ABVMeHNidGkvYXBpL1NvdXJjZUFQSTtMAAtjb21waWxhdGlvbnQAF0x4c2J0aS9hcGkvQ29tcGlsYXRpb247WwAEaGFzaHQAAltCeHDcIrfLAHNyACJ4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaGVzVNq+mfrU7EwCAAJbAA9pbXBsaWNpdE1lbWJlcnN0ACNbTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoO1sADnJlZ3VsYXJNZW1iZXJzcQB+AAd4cHVyACNbTHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoO0lagLbdlov0AgAAeHAAAABPc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwM/GMYHQAJ2NvbnZlcnRUcmF2ZXJzYWJsZU1hdGNoZXJUb0FycmF5TWF0Y2hlcnNxAH4AC+Rr0890ACFjb252ZXJ0RG91YmxlVG9QbHVzT3JNaW51c1dyYXBwZXJzcQB+AAv7oF2MdAAsY29udmVydEhhc0ludEdldFNpemVGaWVsZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAtX09Y0dAAuY29udmVydEhhc0xvbmdMZW5ndGhGaWVsZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4ACxtw+Ul0AChjb252ZXJ0R2V0TGVuZ3RoRmllbGRUb0xvbmdMZW5ndGhXcmFwcGVyc3EAfgALXAzzl3QAGmNvbnZlcnRUb0xvbmdTaG91bGRXcmFwcGVyc3EAfgAL6dKEM3QAI2NvbnZlcnRHZXRTaXplRmllbGRUb0ludFNpemVXcmFwcGVyc3EAfgAL8yKtZXQAL2NvbnZlcnRTaXplUGFyYW1ldGVybGVzc01ldGhvZFRvTG9uZ1NpemVXcmFwcGVyc3EAfgALr3Nm83QANWNvbnZlcnRHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9JbnRMZW5ndGhXcmFwcGVyc3EAfgALQ9eT2nQAIGNvbnZlcnRTaXplRmllbGRUb0ludFNpemVXcmFwcGVyc3EAfgALnyqERHQAKmNvbnZlcnRIYXNMb25nU2l6ZUZpZWxkVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4AC8lQoA90ACFjb252ZXJ0U2l6ZU1ldGhvZFRvSW50U2l6ZVdyYXBwZXJzcQB+AAuntkcwdAAvY29udmVydEhhc0xvbmdMZW5ndGhNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAvpdhIkdAA7Y29udmVydEhhc0xvbmdHZXRTaXplUGFyYW1ldGVybGVzc01ldGhvZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAtq0TeJdAAfY29udmVydExvbmdUb1BsdXNPck1pbnVzV3JhcHBlcnNxAH4AC0QjLr10ABpjb252ZXJ0VG9MaXN0U2hvdWxkV3JhcHBlcnNxAH4ACwS2tj90ABdjb252ZXJ0VG9NYXRjaGVyV3JhcHBlcnNxAH4AC9zE7c50AB5jb252ZXJ0SW50VG9QbHVzT3JNaW51c1dyYXBwZXJzcQB+AAtG9vP+dAAbY29udmVydFRvRmxvYXRTaG91bGRXcmFwcGVyc3EAfgALA2pHm3QAKmNvbnZlcnRIYXNJbnRTaXplTWV0aG9kVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4AC0s5GfF0ACVjb252ZXJ0R2V0U2l6ZU1ldGhvZFRvTG9uZ1NpemVXcmFwcGVyc3EAfgALQTcOB3QAGWNvbnZlcnRUb0FueVNob3VsZFdyYXBwZXJzcQB+AAuaTgUQdAAzY29udmVydExlbmd0aFBhcmFtZXRlcmxlc3NNZXRob2RUb0xvbmdMZW5ndGhXcmFwcGVyc3EAfgALlTR/EHQAMWNvbnZlcnRIYXNJbnRHZXRMZW5ndGhNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAttd6jadAASY29udmVydFRvRXF1YWxpemVyc3EAfgALMkTbrHQAJWNvbnZlcnRMZW5ndGhGaWVsZFRvTG9uZ0xlbmd0aFdyYXBwZXJzcQB+AAuIz4sUdAApY29udmVydEdldExlbmd0aE1ldGhvZFRvTG9uZ0xlbmd0aFdyYXBwZXJzcQB+AAtoDZ+tdAApY29udmVydEhhc0ludFNpemVGaWVsZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAu7vk6edAAdY29udmVydFRvSmF2YU1hcFNob3VsZFdyYXBwZXJzcQB+AAvZjeiSdAAmY29udmVydExlbmd0aE1ldGhvZFRvTG9uZ0xlbmd0aFdyYXBwZXJzcQB+AAssgMr8dAAuY29udmVydFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9JbnRTaXplV3JhcHBlcnNxAH4ACwmC0Hh0ADtjb252ZXJ0SGFzSW50UGFyYW1ldGVybGVzc0xlbmd0aE1ldGhvZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC9eRM8p0ACRjb252ZXJ0TGVuZ3RoRmllbGRUb0ludExlbmd0aFdyYXBwZXJzcQB+AAupevLPdAAxY29udmVydEdldFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9JbnRTaXplV3JhcHBlcnNxAH4AC7Th/o50AC5jb252ZXJ0SGFzTG9uZ0dldFNpemVNZXRob2RUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALLwQ39nQABGluZm9zcQB+AAvnRkLWdAA3Y29udmVydEhhc0ludFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4AC51MHvt0ADBjb252ZXJ0SGFzSW50R2V0TGVuZ3RoRmllbGRUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAtkTPr8dAA6Y29udmVydEhhc0ludEdldFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9TaXplU2hvdWxkV3JhcHBlcnNxAH4ACxZi/gt0ACtjb252ZXJ0VG9FdmFsdWF0aW5nQXBwbGljYXRpb25TaG91bGRXcmFwcGVyc3EAfgALmcsLX3QAPmNvbnZlcnRIYXNJbnRHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9MZW5ndGhTaG91bGRXcmFwcGVyc3EAfgALfyC95nQAIWNvbnZlcnRTaXplRmllbGRUb0xvbmdTaXplV3JhcHBlcnNxAH4AC9uduux0ADJjb252ZXJ0TGVuZ3RoUGFyYW1ldGVybGVzc01ldGhvZFRvSW50TGVuZ3RoV3JhcHBlcnNxAH4AC3yxeWh0ABxjb252ZXJ0VG9Eb3VibGVTaG91bGRXcmFwcGVyc3EAfgALEdN00HQAImNvbnZlcnRTaXplTWV0aG9kVG9Mb25nU2l6ZVdyYXBwZXJzcQB+AAv8AvFLdAAbY29udmVydFRvU2hvcnRTaG91bGRXcmFwcGVyc3EAfgALHNu0S3QAH2NvbnZlcnRCeXRlVG9QbHVzT3JNaW51c1dyYXBwZXJzcQB+AAt2aMs3dAA/Y29udmVydEhhc0xvbmdHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9MZW5ndGhTaG91bGRXcmFwcGVyc3EAfgAL1101unQALWNvbnZlcnRIYXNJbnRMZW5ndGhGaWVsZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4ACw2WBQt0ACRjb252ZXJ0VG9KYXZhQ29sbGVjdGlvblNob3VsZFdyYXBwZXJzcQB+AAtAKONUdAAZY29udmVydFRvTWFwU2hvdWxkV3JhcHBlcnNxAH4AC3obZbx0ACVjb252ZXJ0TGVuZ3RoTWV0aG9kVG9JbnRMZW5ndGhXcmFwcGVyc3EAfgALjKbD9nQAK2NvbnZlcnRIYXNMb25nU2l6ZU1ldGhvZFRvU2l6ZVNob3VsZFdyYXBwZXJzcQB+AAsQwuZvdAAuY29udmVydEhhc0ludExlbmd0aE1ldGhvZFRvTGVuZ3RoU2hvdWxkV3JhcHBlcnNxAH4AC20epHV0ACFjb252ZXJ0TWFwTWF0Y2hlclRvSmF2YU1hcE1hdGNoZXJzcQB+AAugeWS9dAAkY29udmVydEdldFNpemVNZXRob2RUb0ludFNpemVXcmFwcGVyc3EAfgALt83MzHQANmNvbnZlcnRHZXRMZW5ndGhQYXJhbWV0ZXJsZXNzTWV0aG9kVG9Mb25nTGVuZ3RoV3JhcHBlcnNxAH4AC5sayph0ABljb252ZXJ0VG9TZXFTaG91bGRXcmFwcGVyc3EAfgALmdKsQnQAIGNvbnZlcnRGbG9hdFRvUGx1c09yTWludXNXcmFwcGVyc3EAfgAL+MaPpHQAKGNvbnZlcnRHZXRMZW5ndGhNZXRob2RUb0ludExlbmd0aFdyYXBwZXJzcQB+AAsB2T0ddAAtY29udmVydEhhc0xvbmdHZXRTaXplRmllbGRUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALAInMoXQAOGNvbnZlcnRIYXNMb25nU2l6ZVBhcmFtZXRlcmxlc3NNZXRob2RUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALVdRZ4XQAHGNvbnZlcnRUb1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAvY6hqrdAArY29udmVydFN5bWJvbFRvSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4AC5r2mtt0ABxjb252ZXJ0VG9BbnlSZWZTaG91bGRXcmFwcGVyc3EAfgALRsEttXQAMWNvbnZlcnRIYXNMb25nR2V0TGVuZ3RoRmllbGRUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAuVJzCcdAAyY29udmVydEhhc0xvbmdHZXRMZW5ndGhNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAsT6hbldAAyY29udmVydEdldFNpemVQYXJhbWV0ZXJsZXNzTWV0aG9kVG9Mb25nU2l6ZVdyYXBwZXJzcQB+AAt+bchQdAAwY29udmVydFRyYXZlcnNhYmxlTWF0Y2hlclRvSmF2YUNvbGxlY3Rpb25NYXRjaGVyc3EAfgALLFxxGHQAHmNvbnZlcnRUb0phdmFMaXN0U2hvdWxkV3JhcHBlcnNxAH4AC4LCR/V0ADxjb252ZXJ0SGFzTG9uZ0xlbmd0aFBhcmFtZXRlcmxlc3NNZXRob2RUb0xlbmd0aFNob3VsZFdyYXBwZXJzcQB+AAsHMzXRdAAtY29udmVydEhhc0ludEdldFNpemVNZXRob2RUb1NpemVTaG91bGRXcmFwcGVyc3EAfgALmlSBBXQAJ2NvbnZlcnRHZXRMZW5ndGhGaWVsZFRvSW50TGVuZ3RoV3JhcHBlcnNxAH4AC4yvVy10ABljb252ZXJ0VG9JbnRTaG91bGRXcmFwcGVyc3EAfgALpB2NcXQAGmNvbnZlcnRUb0J5dGVTaG91bGRXcmFwcGVyc3EAfgALu1/s+HQAG2NvbnZlcnRUb0FycmF5U2hvdWxkV3JhcHBlcnNxAH4ACw1YYhp0ACBjb252ZXJ0U2hvcnRUb1BsdXNPck1pbnVzV3JhcHBlcnNxAH4AC7L5hg90ACRjb252ZXJ0R2V0U2l6ZUZpZWxkVG9Mb25nU2l6ZVdyYXBwZXJzcQB+AAvFD4xhdAAhY29udmVydFRvVHJhdmVyc2FibGVTaG91bGRXcmFwcGVydXEAfgAJAAABCnNxAH4AC4jTgB10AAZhc3NlcnRzcQB+AAtLxywndAAaUmVzdWx0T2ZMZXNzVGhhbkNvbXBhcmlzb25zcQB+AAsgMe85dAAeUmVzdWx0T2ZTdGFydFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALkR2IBHQAFVJlc3VsdE9mTm90V29yZEZvclNlcXNxAH4AC9gcyoB0AAh0ZXN0TmFtZXNxAH4AC4drjcp0ABFnZXRSdW5UZXN0R29vZGllc3NxAH4AC4iIN8p0ABBPckZ1bGx5TWF0Y2hXb3Jkc3EAfgAL36mwgnQABm5vdGlmeXNxAH4AC+/Kx1p0AAdmYWlsdXJlc3EAfgAL2t4DA3QAIFJlc3VsdE9mSGF2ZVdvcmRGb3JMZW5ndGhXcmFwcGVyc3EAfgALtJXU2nQAB3VuYXBwbHlzcQB+AAujOXD0dAAFcmVnZXhzcQB+AAt4O41sdAAGQW5Xb3Jkc3EAfgALMfQYDXQAC0NvbnRhaW5Xb3Jkc3EAfgALL7yjcnQAB3Byb2R1Y2VzcQB+AAs2LCG6dAAHY3VycmllZHNxAH4AC8aOO9F0AB9SZXN1bHRPZk5vdFdvcmRGb3JMZW5ndGhXcmFwcGVyc3EAfgALd2rqNnQAAl9fc3EAfgALE/hFFHQABHRlc3RzcQB+AAuyv7LpdAARZXhlY3V0ZSRkZWZhdWx0JDJzcQB+AAtm8QQ8dAAMZXhwZWN0UmVzdWx0c3EAfgALfnRYZnQACWludGVyY2VwdHNxAH4ACxkKvWN0AB1SZXN1bHRPZk5vdFdvcmRGb3JUcmF2ZXJzYWJsZXNxAH4AC7g4P5d0AARmYWlsc3EAfgALyrVl2XQAG1Jlc3VsdE9mSGF2ZVdvcmRGb3JKYXZhTGlzdHNxAH4AC3TLH9V0AARuYW1lc3EAfgALAcMaJXQADGV4cGVjdGVkU2l6ZXNxAH4AC7cU1ch0ABxIYXZlUHJvcGVydHlNYXRjaGVyR2VuZXJhdG9yc3EAfgALeOZU6XQAE0RvdWJsZVNob3VsZFdyYXBwZXJzcQB+AAsFexgKdAAHTm90V29yZHNxAH4AC5cCIax0AApMZW5ndGhXb3Jkc3EAfgALx7FvmHQABUFXb3Jkc3EAfgALJnuVqHQAD3ByaW50U3RhY2tUcmFjZXNxAH4AC+cNMAB0AARoYXZlc3EAfgALZ8IiZHQAEWV4ZWN1dGUkZGVmYXVsdCQ0c3EAfgALA+LG0nQACU9yTm90V29yZHNxAH4ACx6vUAt0ABNnZXRMb2NhbGl6ZWRNZXNzYWdlc3EAfgALIcqqRXQAB2V4ZWN1dGVzcQB+AAvZAcb+dAAEd2FpdHNxAH4AC70KZnV0ABpSZXN1bHRPZkhhdmVXb3JkRm9ySmF2YU1hcHNxAH4AC0Kxdj10AAI8PXNxAH4AC4IynDZ0AAlzdHlsZU5hbWVzcQB+AAsJxErCdAAOU2hvcnRUb2xlcmFuY2VzcQB+AAvCBmQAdAAQQW5kU3RhcnRXaXRoV29yZHNxAH4AC4DILz10AA5jb3B5JGRlZmF1bHQkMnNxAH4AC3bIpeB0AAhIYXZlV29yZHNxAH4AC4wW9jR0AA0kYXNJbnN0YW5jZU9mc3EAfgAL62o2X3QADk1hdGNoZXJXcmFwcGVyc3EAfgALXScTxnQACXN0YXJ0V2l0aHNxAH4AC/k7pdV0AARzaXplc3EAfgALAjJ/cnQAEWV4ZWN1dGUkZGVmYXVsdCQzc3EAfgALbUEF23QAB2NvbXBvc2VzcQB+AAsdiCq8dAANTGVuZ3RoV3JhcHBlcnNxAH4ACwmUOoV0AAxJbnRUb2xlcmFuY2VzcQB+AAtegcOpdAAFY2xhenpzcQB+AAvr9Gz4dAASRmxvYXRTaG91bGRXcmFwcGVyc3EAfgALWvWT53QAHFJlc3VsdE9mUmVnZXhXb3JkQXBwbGljYXRpb25zcQB+AAs3Kg4DdAASQXJyYXlTaG91bGRXcmFwcGVyc3EAfgALMa/RwXQACWNvbmZpZ01hcHNxAH4AC9pCIyp0ABd3cmFwUmVwb3J0ZXJJZk5lY2Vzc2FyeXNxAH4AC0m+dIp0AAxwcm9kdWN0QXJpdHlzcQB+AAudMUOadAAcbWF0Y2hTeW1ib2xUb1ByZWRpY2F0ZU1ldGhvZHNxAH4ACxMbWH90AAlWYWx1ZVdvcmRzcQB+AAsxMcIzdAAGZXF1YWxzc3EAfgALD5/1bHQADXN1cGVyJHJ1blRlc3RzcQB+AAvVoTiWdAARTGlzdFNob3VsZFdyYXBwZXJzcQB+AAuUPK8fdAAUZ2V0TWV0aG9kRm9yVGVzdE5hbWVzcQB+AAurZLMldAAdUmVzdWx0T2ZOb3RXb3JkRm9yU2l6ZVdyYXBwZXJzcQB+AAuBUXRudAAZUmVzdWx0T2ZQcm9kdWNlSW52b2NhdGlvbnNxAH4AC/ZCakp0ABlSZXN1bHRPZkhhdmVXb3JkRm9yU3RyaW5nc3EAfgALKZhlLnQAEGhhbmRsZUZhaWxlZFRlc3RzcQB+AAurfjjMdAAQZmlsbEluU3RhY2tUcmFjZXNxAH4ACyHkeV90AAl0b2xlcmFuY2VzcQB+AAuo1MnodAANZXhwZWN0ZWRWYWx1ZXNxAH4AC7bWaz90ABhUcmF2ZXJzYWJsZVNob3VsZFdyYXBwZXJzcQB+AAsZqbETdAAbUmVzdWx0T2ZTaXplV29yZEFwcGxpY2F0aW9uc3EAfgALeHQ4pnQACE9yQmVXb3Jkc3EAfgALY8IIlXQACWluaXRDYXVzZXNxAH4ACwVuC2R0ABxSZXN1bHRPZkVuZFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALyvdgwXQACkFuZE5vdFdvcmRzcQB+AAve9i7OdAANT3JJbmNsdWRlV29yZHNxAH4AC3WDgzJ0AAlBbmRCZVdvcmRzcQB+AAssXTRIdAAEdGFnc3NxAH4AC5pi1+t0AARrb2Fuc3EAfgALBxei63QAGlJlc3VsdE9mS2V5V29yZEFwcGxpY2F0aW9uc3EAfgALXbKL5XQADGFzSW5zdGFuY2VPZnNxAH4AC8j7BCp0ABVSZXN1bHRPZk5vdFdvcmRGb3JNYXBzcQB+AAvWRrdPdAABPHNxAH4AC0NELi10ACJFdmFsdWF0aW5nQXBwbGljYXRpb25TaG91bGRXcmFwcGVyc3EAfgALE9O8L3QAA3J1bnNxAH4ACy+CLqB0ABhEb3VibGVQbHVzT3JNaW51c1dyYXBwZXJzcQB+AAv788sGdAAJc3VwZXIkcnVuc3EAfgALD6/F1HQADmV4cGVjdGVkTGVuZ3Roc3EAfgALXDaLwnQAGlJlc3VsdE9mTm90V29yZEZvckphdmFMaXN0c3EAfgALAZBIi3QADkZsb2F0VG9sZXJhbmNlc3EAfgALLT+cbXQADHN5bmNocm9uaXplZHNxAH4ACw8EDIZ0AA1Mb25nVG9sZXJhbmNlc3EAfgALXqokYnQAGFJlc3VsdE9mTm90V29yZEZvckRvdWJsZXNxAH4AC6rE0VB0AApldmFsdWF0aW5nc3EAfgALiQGqxnQAB0tleVdvcmRzcQB+AAvwK2m0dAANc2hvdWxkTWF0Y2hlcnNxAH4AC/FIwIl0AAZmYWlsZWRzcQB+AAtUOBirdAABYXNxAH4AC/uEqmV0AA0kaXNJbnN0YW5jZU9mc3EAfgALXLZPiXQADUJ5dGVUb2xlcmFuY2VzcQB+AAuehZPIdAAHYW5kVGhlbnNxAH4AC5XQ3iN0AAhnZXRDYXVzZXNxAH4ACycGYXl0AAI+PXNxAH4AC3A/vYh0AAZ0dXBsZWRzcQB+AAtkn6U5dAAVSW50UGx1c09yTWludXNXcmFwcGVyc3EAfgAL4YccE3QADkFuZEVuZFdpdGhXb3Jkc3EAfgAL20/Tg3QAC3BsdXNPck1pbnVzc3EAfgALsBTMHHQAEEludFNob3VsZFdyYXBwZXJzcQB+AAvZqR3CdAAVUmVzdWx0T2ZOb3RXb3JkRm9ySW50c3EAfgALl1pH2HQACGNhbkVxdWFsc3EAfgALx2nXnnQADkFuZENvbnRhaW5Xb3Jkc3EAfgAL4atEu3QAB2NvbnRhaW5zcQB+AAu6OZ7ydAAPUmVzdWx0T2ZOb3RXb3Jkc3EAfgALF+SR13QAAm9yc3EAfgALnuiuPHQAFlJlc3VsdE9mTm90V29yZEZvckxvbmdzcQB+AAvTexGddAAXUmVzdWx0T2ZOb3RXb3JkRm9yRmxvYXRzcQB+AAtvDF5+dAARZXhlY3V0ZSRkZWZhdWx0JDdzcQB+AAtQdZrSdAARdGhlU2FtZUluc3RhbmNlQXNzcQB+AAvUaKebdAANcHJvZHVjdFByZWZpeHNxAH4AC3FRjGR0ABNMZW5ndGhTaG91bGRXcmFwcGVyc3EAfgALGsNNxHQAIFJlc3VsdE9mTm90V29yZEZvckphdmFDb2xsZWN0aW9uc3EAfgALyNIrunQACWdldExlbmd0aHNxAH4AC8vg1U50AAlub3RpZnlBbGxzcQB+AAtORABNdAALcmVhZFJlc29sdmVzcQB+AAv54NnzdAALd2l0aEZpeHR1cmVzcQB+AAuZUlyodAAXUmVzdWx0T2ZOb3RXb3JkRm9yU2hvcnRzcQB+AAvEYR6zdAAHcnVuVGVzdHNxAH4AC2jeHZt0ABRKYXZhTWFwU2hvdWxkV3JhcHBlcnNxAH4AC4Sc3xd0ABJTaG91bGRNZXRob2RIZWxwZXJzcQB+AAtEVTjzdAADa2V5c3EAfgAL/vRP8XQADGlzSW5zdGFuY2VPZnNxAH4AC3jQuXl0AAh3aXRoQ2x1ZXNxAH4AC8OpuQx0ABFleGVjdXRlJGRlZmF1bHQkNnNxAH4AC8C/t1B0ABZnZXRTdWl0ZVJ1blRlc3RHb29kaWVzc3EAfgALfSsis3QADWdldFN0YWNrVHJhY2VzcQB+AAtTMymRdAAUZ2V0U3RhY2tUcmFjZUVsZW1lbnRzcQB+AAv7M9U3dAAQU2VxU2hvdWxkV3JhcHBlcnNxAH4AC1VGybh0ABdSZXN1bHRPZk5vdFdvcmRGb3JBcnJheXNxAH4AC+/Y3yt0ABxSZXN1bHRPZlZhbHVlV29yZEFwcGxpY2F0aW9uc3EAfgALTbJtUXQAC0FuZEhhdmVXb3Jkc3EAfgALAko5sHQAGFJlc3VsdE9mSGF2ZVdvcmRGb3JBcnJheXNxAH4AC9JH9nd0AApPckhhdmVXb3Jkc3EAfgALCLgy63QABnN5bWJvbHNxAH4ACy05lqB0ACZSZXN1bHRPZkdyZWF0ZXJUaGFuT3JFcXVhbFRvQ29tcGFyaXNvbnNxAH4ACwy81xd0ABlSZXN1bHRPZk5vdFdvcmRGb3JKYXZhTWFwc3EAfgALIG6T5XQALFJlc3VsdE9mQW5Xb3JkVG9CZVByb3BlcnR5TWF0Y2hlckFwcGxpY2F0aW9uc3EAfgALhhSq93QABjxpbml0PnNxAH4ACxYc5MB0AA9ydW5OZXN0ZWRTdWl0ZXNzcQB+AAtcuK2xdAAXUmVzdWx0T2ZCZVdvcmRGb3JBbnlSZWZzcQB+AAtRtNgcdAAKZ2V0TWVzc2FnZXNxAH4AC+YMOFt0AANfX19zcQB+AAvHa1AsdAANc2V0U3RhY2tUcmFjZXNxAH4AC6By09t0ABdGbG9hdFBsdXNPck1pbnVzV3JhcHBlcnNxAH4ACwIa22l0ABFTaXplU2hvdWxkV3JhcHBlcnNxAH4AC5VhNPR0AAVlcXVhbHNxAH4AC3rTCON0ACtSZXN1bHRPZkFXb3JkVG9CZVByb3BlcnR5TWF0Y2hlckFwcGxpY2F0aW9uc3EAfgALDm5I93QAHVJlc3VsdE9mR3JlYXRlclRoYW5Db21wYXJpc29uc3EAfgALmAXwwnQABWFwcGx5c3EAfgALcHlIeHQADWdldFN1cHByZXNzZWRzcQB+AAszkVrjdAAJRXF1YWxpemVyc3EAfgALNQRwcHQAFUphdmFMaXN0U2hvdWxkV3JhcHBlcnNxAH4AC13cA5x0AA1PckVuZFdpdGhXb3Jkc3EAfgAL8vC+f3QAG25ld0Fzc2VydGlvbkZhaWxlZEV4Y2VwdGlvbnNxAH4ACxP/C6J0ABFSZXBvcnRUb1RoZU1hc3RlcnNxAH4AC9Cgl+N0AAI9PXNxAH4ACyBoRep0ACRSZXN1bHRPZlRoZVNhbWVJbnN0YW5jZUFzQXBwbGljYXRpb25zcQB+AAtu0ViydAATQW55UmVmU2hvdWxkV3JhcHBlcnNxAH4AC98Sh5V0AA5GdWxseU1hdGNoV29yZHNxAH4AC0uwUgx0ABJnZXRTdGFja1RyYWNlRGVwdGhzcQB+AAvPMwJydAAKZnVsbHlNYXRjaHNxAH4AC4Oi4I50AAVjbG9uZXNxAH4ACyfIKbJ0ABNTdHJpbmdTaG91bGRXcmFwcGVyc3EAfgALMH7Gk3QABmV4cGVjdHNxAH4ACwGNg1x0AAZzaG91bGRzcQB+AAt6+wrldAANYWRkU3VwcHJlc3NlZHNxAH4AC24b5Wx0AB5SZXN1bHRPZkhhdmVXb3JkRm9yVHJhdmVyc2FibGVzcQB+AAur2zVXdAALRW5kV2l0aFdvcmRzcQB+AAsrWGHrdAAQQW55U2hvdWxkV3JhcHBlcnNxAH4AC6bqusd0AANub3RzcQB+AAukyUxNdAAeUmVzdWx0T2ZIYXZlV29yZEZvclNpemVXcmFwcGVyc3EAfgALMUYP2XQADG5lc3RlZFN1aXRlc3NxAH4ACx6Lt5d0AAhtZWRpdGF0ZXNxAH4AC0kWXS90AANmdW5zcQB+AAvkrTsudAAOQW5kSW5jbHVkZVdvcmRzcQB+AAvlU5hmdAALZXhwZWN0ZWRLZXlzcQB+AAtecncudAAbSmF2YUNvbGxlY3Rpb25TaG91bGRXcmFwcGVyc3EAfgALm3sVm3QAB2luY2x1ZGVzcQB+AAs08FTPdAAWUmVzdWx0T2ZIYXZlV29yZEZvclNlcXNxAH4ACxkLCNZ0AA9Eb3VibGVUb2xlcmFuY2VzcQB+AAuhg1XIdAAfUmVzdWx0T2ZUcmlwbGVFcXVhbHNBcHBsaWNhdGlvbnNxAH4AC1944LJ0ABFleGVjdXRlJGRlZmF1bHQkNXNxAH4ACw056W50ACBuZXdUZXN0RmFpbGVkRXhjZXB0aW9uJGRlZmF1bHQkMnNxAH4ACyE5JTV0AA9leHBlY3RlZEVsZW1lbnRzcQB+AAs3y7YudAARQW5kRnVsbHlNYXRjaFdvcmRzcQB+AAs1+gCBdAARYmVQcm9wZXJ0eU1hdGNoZXJzcQB+AAsTKQfkdAAEY29weXNxAH4ACzZbMkN0ABhSZXN1bHRPZk5vdFdvcmRGb3JBbnlSZWZzcQB+AAvFekf6dAADPT09c3EAfgALZ01Lh3QAIVJlc3VsdE9mSGF2ZVdvcmRGb3JKYXZhQ29sbGVjdGlvbnNxAH4AC18aCoB0AAh0b1N0cmluZ3NxAH4AC03BZrh0AAl0ZXN0TmFtZXNzcQB+AAsbAVgedAACYW5zcQB+AAvqANZwdAAGbGVuZ3Roc3EAfgALEoSkTXQAEWV4ZWN1dGUkZGVmYXVsdCQxc3EAfgALshfk4HQAGVJlc3VsdE9mQ29udGFpbldvcmRGb3JNYXBzcQB+AAtXMtgPdAACYmVzcQB+AAvjG+zxdAASU2hvcnRTaG91bGRXcmFwcGVyc3EAfgAL09cLEHQAAiE9c3EAfgALmnZtLHQAH1Jlc3VsdE9mRnVsbHlNYXRjaFdvcmRGb3JTdHJpbmdzcQB+AAvN3MO4dAAWUmVzdWx0T2ZOb3RXb3JkRm9yQnl0ZXNxAH4AC1Jx3VJ0AAhnZXRDbGFzc3NxAH4ACxrxTw50ABFMb25nU2hvdWxkV3JhcHBlcnNxAH4ACy4CtRh0AAdnZXRTaXplc3EAfgALlzxxrnQACFNpemVXb3Jkc3EAfgALZfwR33QACHRlc3RzRm9yc3EAfgALJ/VzAnQADmNvcHkkZGVmYXVsdCQxc3EAfgALBAPoxnQACHJ1blRlc3Rzc3EAfgAL5CPq6HQADU9yQ29udGFpbldvcmRzcQB+AAv2aK8/dAAPT3JTdGFydFdpdGhXb3Jkc3EAfgAL41qflnQAGFJlc3VsdE9mTm90V29yZEZvclN0cmluZ3NxAH4AC8shAVx0ABFwZW5kaW5nVW50aWxGaXhlZHNxAH4AC3e4vvN0ABdUaGVTYW1lSW5zdGFuY2VBc1BocmFzZXNxAH4AC4+b9QV0ABBNYXBTaG91bGRXcmFwcGVyc3EAfgALpXYe7nQAEWV4cGVjdGVkVGVzdENvdW50c3EAfgALmbBe3HQAB2VuZFdpdGhzcQB+AAti7LZ2dAAJUmVnZXhXb3Jkc3EAfgALY2m/jHQAFkJ5dGVQbHVzT3JNaW51c1dyYXBwZXJzcQB+AAsSCW6FdAACbmVzcQB+AAuOXnQ/dAAhUmVzdWx0T2ZBbldvcmRUb1N5bWJvbEFwcGxpY2F0aW9uc3EAfgALbrwNH3QAC0luY2x1ZGVXb3Jkc3EAfgALYAAtCHQAFkxvbmdQbHVzT3JNaW51c1dyYXBwZXJzcQB+AAtPsC8ldAAdUmVzdWx0T2ZFdmFsdWF0aW5nQXBwbGljYXRpb25zcQB+AAv12AC0dAAHcGVuZGluZ3NxAH4AC4M4Ail0AAV2YWx1ZXNxAH4ACztL8c90AAZpZ25vcmVzcQB+AAvs/CzadAAcUmVzdWx0T2ZJbmNsdWRlV29yZEZvclN0cmluZ3NxAH4AC/Lti410AAZCZVdvcmRzcQB+AAvBRct2dAAdUmVzdWx0T2ZMZW5ndGhXb3JkQXBwbGljYXRpb25zcQB+AAsc41LndAASQWJvdXRQYXJlbnRDbGFzc2Vzc3EAfgALQdG5aXQAAmVxc3EAfgAL64W94nQAD3Byb2R1Y3RJdGVyYXRvcnNxAH4AC87xz090AANhbmRzcQB+AAsURSW2dAARQnl0ZVNob3VsZFdyYXBwZXJzcQB+AAvbdR80dAAJTm9BcmdUZXN0c3EAfgALuPbmLHQAC1NpemVXcmFwcGVyc3EAfgAL0q04mnQAAT5zcQB+AAth0JT5dAAFcmlnaHRzcQB+AAu2Sw8UdAACIyNzcQB+AAtoWXaddAAGZW5naW5lc3EAfgALJwwpnHQAGlN0cmluZ1Nob3VsZFdyYXBwZXJGb3JWZXJic3EAfgALtu5eqXQACGZpbmFsaXplc3EAfgALMq6SFHQAFm5ld1Rlc3RGYWlsZWRFeGNlcHRpb25zcQB+AAsrz2P1dAAOcHJvZHVjdEVsZW1lbnRzcQB+AAuMY+CadAAIaGFzaENvZGVzcQB+AAufyml2dAAeUmVzdWx0T2ZFbGVtZW50V29yZEFwcGxpY2F0aW9uc3EAfgALmMjtLnQAIFJlc3VsdE9mQVdvcmRUb1N5bWJvbEFwcGxpY2F0aW9uc3EAfgALID52kHQACXN1aXRlTmFtZXNxAH4ACxwGpvx0ACNSZXN1bHRPZkxlc3NUaGFuT3JFcXVhbFRvQ29tcGFyaXNvbnNxAH4AC6zAwKV0AB1SZXN1bHRPZkNvbnRhaW5Xb3JkRm9ySmF2YU1hcHNxAH4AC7dPabR0AA1TdGFydFdpdGhXb3Jkc3EAfgALcchI4XQAF1Nob3J0UGx1c09yTWludXNXcmFwcGVyc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4CyXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzxxETIWmc3CQCAAFCAAVmbGFnc3hwAHQAL29yZy5mdW5jdGlvbmFsa29hbnMuZm9yc2NhbGEuQWJvdXRQYXJlbnRDbGFzc2VzdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdAAQc2NhbGEuZGVwcmVjYXRlZHNyABN4c2J0aS5TYWZlTGF6eSRJbXBsUAIuk5eXQD8CAANaAAhiaXRtYXAkMEwAAl90dAASTGphdmEvbGFuZy9PYmplY3Q7TAAEZXZhbHQAEUxzY2FsYS9GdW5jdGlvbjA7eHIAFnhzYnRpLmFwaS5BYnN0cmFjdExhennTd7UBX7vnoAIAAHhwAHBzcgAgeHNidGkuU2FmZUxhenkkJGFub25mdW4kc3RyaWN0JDEAAAAAAAAAAAIAAUwAB3ZhbHVlJDFxAH4C43hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4C4gFzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4CyUwACWluaGVyaXRlZHEAfgLJTAAHcGFyZW50c3EAfgLJeHEAfgLrc3EAfgLiAXVxAH4CxAAAAABwc3EAfgLiAXVxAH4CxAAAAABwc3EAfgLiAXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAAMc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4C6nQACUtvYW5TdWl0ZXNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4C6nNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAABXNyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAADb3Jnc3EAfgMDdAAPZnVuY3Rpb25hbGtvYW5zc3EAfgMDdAAIZm9yc2NhbGFzcQB+AwN0AAdzdXBwb3J0c3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AwRzcQB+Avd0AA5TaG91bGRNYXRjaGVyc3NxAH4C+3NxAH4C/nVxAH4DAQAAAARzcQB+AwN0AANvcmdzcQB+AwN0AAlzY2FsYXRlc3RzcQB+AwN0AAhtYXRjaGVyc3EAfgMOc3EAfgL3dAAKU2hvdWxkVmVyYnNxAH4C+3NxAH4C/nVxAH4DAQAAAARzcQB+AwN0AANvcmdzcQB+AwN0AAlzY2FsYXRlc3RzcQB+AwN0AAR2ZXJicQB+Aw5zcQB+Avd0AAhNYXRjaGVyc3EAfgMRc3EAfgL3dAAPQ2xhc3NpY01hdGNoZXJzcQB+AxFzcQB+Avd0AAhGdW5TdWl0ZXNxAH4C+3NxAH4C/nVxAH4DAQAAAANzcQB+AwN0AANvcmdzcQB+AwN0AAlzY2FsYXRlc3RxAH4DDnNxAH4C93QABVN1aXRlcQB+AytzcQB+Avd0AAxTZXJpYWxpemFibGVzcQB+AvtzcQB+Av51cQB+AwEAAAADc3EAfgMDdAAEamF2YXNxAH4DA3QAAmlvcQB+Aw5zcQB+Avd0AA1BYnN0cmFjdFN1aXRlcQB+AytzcQB+Avd0AApBc3NlcnRpb25zcQB+AytzcQB+Avd0AAZPYmplY3RzcQB+AvtzcQB+Av51cQB+AwEAAAADc3EAfgMDcQB+AzpzcQB+AwN0AARsYW5ncQB+Aw5zcQB+Avd0AANBbnlzcQB+AvtzcQB+Av51cQB+AwEAAAACc3EAfgMDdAAFc2NhbGFxAH4DDnBwdXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAANzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADHhwdAAcb3JnLmZ1bmN0aW9uYWxrb2Fucy5mb3JzY2FsYXNxAH4DUnQAE29yZy5mdW5jdGlvbmFsa29hbnNzcQB+A1J0AANvcmdzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAUleJ+FVdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgAMTAAPc291cmNlRGlyZWN0b3J5cQB+AAx4cHQASy9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3RhcmdldC9zY2FsYS0yLjEwL3Rlc3QtY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFEP1OUPCV1z7LTtvbOTnNND2M4+T
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlFlpwRASfbtoCAAZJAAdhcGlIYXNoWgAIaGFzTWFjcm9MABhfaW50ZXJuYWxPbmx5X25hbWVIYXNoZXN0ACRMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2hlcztMAANhcGl0ABVMeHNidGkvYXBpL1NvdXJjZUFQSTtMAAtjb21waWxhdGlvbnQAF0x4c2J0aS9hcGkvQ29tcGlsYXRpb247WwAEaGFzaHQAAltCeHDtfzzhAHNyACJ4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaGVzVNq+mfrU7EwCAAJbAA9pbXBsaWNpdE1lbWJlcnN0ACNbTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoO1sADnJlZ3VsYXJNZW1iZXJzcQB+AAd4cHVyACNbTHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoO0lagLbdlov0AgAAeHAAAAABc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwQZ4Ye3QAEmNvbnZlcnRUb0VxdWFsaXplcnVxAH4ACQAAADxzcQB+AAtSO2mydAAGYXNzZXJ0c3EAfgAL/eN7JXQAEWdldFJ1blRlc3RHb29kaWVzc3EAfgALq1JrfXQABm5vdGlmeXNxAH4AC7G1XVt0ABFleGVjdXRlJGRlZmF1bHQkMnNxAH4ACyFJXV90AAxleHBlY3RSZXN1bHRzcQB+AAsorjlXdAAJaW50ZXJjZXB0c3EAfgALw3oVBXQABGZhaWxzcQB+AAt/krn4dAAEbmFtZXNxAH4ACzTIv5Z0ABFleGVjdXRlJGRlZmF1bHQkNHNxAH4ACyMYxzl0AAdleGVjdXRlc3EAfgALCkKHs3QABUtvYW5zc3EAfgAL+SjCaHQABHdhaXRzcQB+AAt380NadAAJc3R5bGVOYW1lc3EAfgALm+hVqXQADSRhc0luc3RhbmNlT2ZzcQB+AAucFCnydAARZXhlY3V0ZSRkZWZhdWx0JDNzcQB+AAtZzX+idAAJY29uZmlnTWFwc3EAfgAL7E+e0nQAF3dyYXBSZXBvcnRlcklmTmVjZXNzYXJ5c3EAfgALxRED7nQABmVxdWFsc3NxAH4AC2x7P1x0ABRnZXRNZXRob2RGb3JUZXN0TmFtZXNxAH4ACwgHVoN0ABBoYW5kbGVGYWlsZWRUZXN0c3EAfgALXUqb93QABHRhZ3NzcQB+AAvL9SOkdAAMYXNJbnN0YW5jZU9mc3EAfgALzpZd93QAA3J1bnNxAH4ACyPNprN0AAxzeW5jaHJvbml6ZWRzcQB+AAshXHuzdAANJGlzSW5zdGFuY2VPZnNxAH4AC1UngXx0ABFleGVjdXRlJGRlZmF1bHQkN3NxAH4AC3fI2nN0AAlub3RpZnlBbGxzcQB+AAtUyIP0dAALd2l0aEZpeHR1cmVzcQB+AAujnpEMdAAHcnVuVGVzdHNxAH4AC7gXevN0AAxpc0luc3RhbmNlT2ZzcQB+AAvtNCX8dAAId2l0aENsdWVzcQB+AAuT5dNCdAARZXhlY3V0ZSRkZWZhdWx0JDZzcQB+AAs4Sk8CdAAWZ2V0U3VpdGVSdW5UZXN0R29vZGllc3NxAH4AC4rs7gJ0AAY8aW5pdD5zcQB+AAtTulQ1dAAPcnVuTmVzdGVkU3VpdGVzc3EAfgALlUSkoXQABWFwcGx5c3EAfgALOBTg+nQACUVxdWFsaXplcnNxAH4AC6KeRSl0ABtuZXdBc3NlcnRpb25GYWlsZWRFeGNlcHRpb25zcQB+AAtAg6nGdAACPT1zcQB+AAsf49/kdAAFY2xvbmVzcQB+AAsYjHo/dAAGZXhwZWN0c3EAfgAL5iF+73QADG5lc3RlZFN1aXRlc3NxAH4AC7FlA6t0ABFleGVjdXRlJGRlZmF1bHQkNXNxAH4AC1f+mk50AAM9PT1zcQB+AAsm9O5ZdAAIdG9TdHJpbmdzcQB+AAs3aYQOdAAJdGVzdE5hbWVzc3EAfgAL8gxtY3QAEWV4ZWN1dGUkZGVmYXVsdCQxc3EAfgALbNyqxHQAAiE9c3EAfgALhQaci3QACGdldENsYXNzc3EAfgALxdI27HQACHJ1blRlc3Rzc3EAfgALSeWRCHQAEXBlbmRpbmdVbnRpbEZpeGVkc3EAfgALA2424nQAEWV4cGVjdGVkVGVzdENvdW50c3EAfgALjqWurXQAAm5lc3EAfgAL7Gylr3QAB3BlbmRpbmdzcQB+AAtzJoYTdAACZXFzcQB+AAt3vbetdAAJTm9BcmdUZXN0c3EAfgALD04xDXQAAiMjc3EAfgALHgtJAHQACGZpbmFsaXplc3EAfgAL5Kpxw3QACGhhc2hDb2Rlc3EAfgALzBmNhXQACXN1aXRlTmFtZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAFzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AJF4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgAMeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc8cREyFpnNwkAgABQgAFZmxhZ3N4cAB0ACJvcmcuZnVuY3Rpb25hbGtvYW5zLmZvcnNjYWxhLktvYW5zdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdAAQc2NhbGEuZGVwcmVjYXRlZHNyABN4c2J0aS5TYWZlTGF6eSRJbXBsUAIuk5eXQD8CAANaAAhiaXRtYXAkMEwAAl90dAASTGphdmEvbGFuZy9PYmplY3Q7TAAEZXZhbHQAEUxzY2FsYS9GdW5jdGlvbjA7eHIAFnhzYnRpLmFwaS5BYnN0cmFjdExhennTd7UBX7vnoAIAAHhwAHBzcgAgeHNidGkuU2FmZUxhenkkJGFub25mdW4kc3RyaWN0JDEAAAAAAAAAAAIAAUwAB3ZhbHVlJDFxAH4Aq3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AqgFzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AkUwACWluaGVyaXRlZHEAfgCRTAAHcGFyZW50c3EAfgCReHEAfgCzc3EAfgCqAXVxAH4AjAAAAABwc3EAfgCqAXVxAH4AjAAAAABwc3EAfgCqAXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAAGc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AsnQABVN1aXRlc3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgCyc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAADc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADHhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AANvcmdzcQB+AMt0AAlzY2FsYXRlc3RzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AzHNxAH4Av3QADFNlcmlhbGl6YWJsZXNxAH4Aw3NxAH4AxnVxAH4AyQAAAANzcQB+AMt0AARqYXZhc3EAfgDLdAACaW9xAH4A0nNxAH4Av3QADUFic3RyYWN0U3VpdGVxAH4AxXNxAH4Av3QACkFzc2VydGlvbnNxAH4AxXNxAH4Av3QABk9iamVjdHNxAH4Aw3NxAH4AxnVxAH4AyQAAAANzcQB+AMtxAH4A2XNxAH4Ay3QABGxhbmdxAH4A0nNxAH4Av3QAA0FueXNxAH4Aw3NxAH4AxnVxAH4AyQAAAAJzcQB+AMt0AAVzY2FsYXEAfgDScHB1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0ABxvcmcuZnVuY3Rpb25hbGtvYW5zLmZvcnNjYWxhc3EAfgDxdAATb3JnLmZ1bmN0aW9uYWxrb2Fuc3NxAH4A8XQAA29yZ3NyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABSV4n4VV1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AAxMAA9zb3VyY2VEaXJlY3RvcnlxAH4ADHhwdABLL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvdGFyZ2V0L3NjYWxhLTIuMTAvdGVzdC1jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUcxvShau42P99HEHts6F6Fq2t5mw=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> 

/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlFlpwRASfbtoCAAZJAAdhcGlIYXNoWgAIaGFzTWFjcm9MABhfaW50ZXJuYWxPbmx5X25hbWVIYXNoZXN0ACRMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2hlcztMAANhcGl0ABVMeHNidGkvYXBpL1NvdXJjZUFQSTtMAAtjb21waWxhdGlvbnQAF0x4c2J0aS9hcGkvQ29tcGlsYXRpb247WwAEaGFzaHQAAltCeHDN1iN2AHNyACJ4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaGVzVNq+mfrU7EwCAAJbAA9pbXBsaWNpdE1lbWJlcnN0ACNbTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoO1sADnJlZ3VsYXJNZW1iZXJzcQB+AAd4cHVyACNbTHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoO0lagLbdlov0AgAAeHAAAAAAdXEAfgAJAAAAG3NyACB4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaFsO9SJ2OFfPAgACSQAEaGFzaEwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cAOt5m10AAh0ZXN0TmFtZXNxAH4ADHQseTh0AAZub3RpZnlzcQB+AAyySWUldAAWc3R1ZGVudE5lZWRzVG9NZWRpdGF0ZXNxAH4ADF795jJ0AAR3YWl0c3EAfgAM0dm3ZnQABk1hc3RlcnNxAH4ADNojZbB0AA0kYXNJbnN0YW5jZU9mc3EAfgAMaYAjW3QABmVxdWFsc3NxAH4ADEOOMDp0AAxhc0luc3RhbmNlT2ZzcQB+AAzOKRuPdAAMc3luY2hyb25pemVkc3EAfgAM4ca4pXQADSRpc0luc3RhbmNlT2ZzcQB+AAwzcyt0dAAJbm90aWZ5QWxsc3EAfgAMZFMbp3QADGlzSW5zdGFuY2VPZnNxAH4ADEOiZo90ABdIYXNUZXN0TmFtZUFuZFN1aXRlTmFtZXNxAH4ADEi/iCt0AAVhcHBseXNxAH4ADDvOjIl0AAI9PXNxAH4ADJZlaOp0AAVjbG9uZXNxAH4ADNhk+f90ABFtZWRpdGF0aW9uTWVzc2FnZXNxAH4ADBOHTrZ0AA1zdHVkZW50RmFpbGVkc3EAfgAM/A/OvnQACHRvU3RyaW5nc3EAfgAMjKuroXQAAiE9c3EAfgAMvown4XQACGdldENsYXNzc3EAfgAMmXZ/83QAAm5lc3EAfgAMWqZhAnQAAmVxc3EAfgAMZsiTVnQAAiMjc3EAfgAMOdr09HQACGZpbmFsaXplc3EAfgAMsONObnQACGhhc2hDb2Rlc3EAfgAM3I5fHnQACXN1aXRlTmFtZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAFzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AE14cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc8cREyFpnNwkAgABQgAFZmxhZ3N4cAB0ACtvcmcuZnVuY3Rpb25hbGtvYW5zLmZvcnNjYWxhLnN1cHBvcnQuTWFzdGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAGTW9kdWxldXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAHNyABN4c2J0aS5TYWZlTGF6eSRJbXBsUAIuk5eXQD8CAANaAAhiaXRtYXAkMEwAAl90dAASTGphdmEvbGFuZy9PYmplY3Q7TAAEZXZhbHQAEUxzY2FsYS9GdW5jdGlvbjA7eHIAFnhzYnRpLmFwaS5BYnN0cmFjdExhennTd7UBX7vnoAIAAHhwAHBzcgAgeHNidGkuU2FmZUxhenkkJGFub25mdW4kc3RyaWN0JDEAAAAAAAAAAAIAAUwAB3ZhbHVlJDFxAH4AZnhwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AZQFzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4ATUwACWluaGVyaXRlZHEAfgBNTAAHcGFyZW50c3EAfgBNeHEAfgBuc3EAfgBlAXVxAH4ASAAAAABwc3EAfgBlAXVxAH4ASAAAAABwc3EAfgBlAXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAADc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AbXQAB1N0b3BwZXJzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AG1zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQAA29yZ3NxAH4AhnQACXNjYWxhdGVzdHNyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgCHc3EAfgB6dAAGT2JqZWN0c3EAfgB+c3EAfgCBdXEAfgCEAAAAA3NxAH4AhnQABGphdmFzcQB+AIZ0AARsYW5ncQB+AI1zcQB+AHp0AANBbnlzcQB+AH5zcQB+AIF1cQB+AIQAAAACc3EAfgCGdAAFc2NhbGFxAH4AjXBwdXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAARzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAkb3JnLmZ1bmN0aW9uYWxrb2Fucy5mb3JzY2FsYS5zdXBwb3J0c3EAfgCgdAAcb3JnLmZ1bmN0aW9uYWxrb2Fucy5mb3JzY2FsYXNxAH4AoHQAE29yZy5mdW5jdGlvbmFsa29hbnNzcQB+AKB0AANvcmdzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAUleJ+FVdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQASy9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3RhcmdldC9zY2FsYS0yLjEwL3Rlc3QtY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFBODL4lOtMdb7kmF8UzY/U8gFzra
external apis:
1 items
org.functionalkoans.forscala.SomeJavaClass -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlFlpwRASfbtoCAAZJAAdhcGlIYXNoWgAIaGFzTWFjcm9MABhfaW50ZXJuYWxPbmx5X25hbWVIYXNoZXN0ACRMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2hlcztMAANhcGl0ABVMeHNidGkvYXBpL1NvdXJjZUFQSTtMAAtjb21waWxhdGlvbnQAF0x4c2J0aS9hcGkvQ29tcGlsYXRpb247WwAEaGFzaHQAAltCeHBkEw1oAHNyACJ4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaGVzVNq+mfrU7EwCAAJbAA9pbXBsaWNpdE1lbWJlcnN0ACNbTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoO1sADnJlZ3VsYXJNZW1iZXJzcQB+AAd4cHVyACNbTHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoO0lagLbdlov0AgAAeHAAAAAAdXEAfgAJAAAAC3NyACB4c2J0aS5hcGkuX2ludGVybmFsT25seV9OYW1lSGFzaFsO9SJ2OFfPAgACSQAEaGFzaEwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cM82xH90AAZub3RpZnlzcQB+AAzc96M/dAAEd2FpdHNxAH4ADFaqTsF0AAZlcXVhbHNzcQB+AAzEKpq4dAAVZmluZFNpemVPZlVua25vd25UeXBlc3EAfgAMAPLCq3QADVNvbWVKYXZhQ2xhc3NzcQB+AAznZ3V/dAAJbm90aWZ5QWxsc3EAfgAMrBsBmXQABjxpbml0PnNxAH4ADOgXgxl0AAh0b1N0cmluZ3NxAH4ADC9psRF0AAhnZXRDbGFzc3NxAH4ADOTc8k50ABFmaW5kU2l6ZU9mUmF3VHlwZXNxAH4ADPzFmbB0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AC14cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc8cREyFpnNwkAgABQgAFZmxhZ3N4cAB0ACpvcmcuZnVuY3Rpb25hbGtvYW5zLmZvcnNjYWxhLlNvbWVKYXZhQ2xhc3N1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAhDbGFzc0RlZnVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AAxzY2FsYS50aHJvd3NzcgATeHNidGkuU2FmZUxhenkkSW1wbFACLpOXl0A/AgADWgAIYml0bWFwJDBMAAJfdHQAEkxqYXZhL2xhbmcvT2JqZWN0O0wABGV2YWx0ABFMc2NhbGEvRnVuY3Rpb24wO3hyABZ4c2J0aS5hcGkuQWJzdHJhY3RMYXp503e1AV+756ACAAB4cABwc3IAIHhzYnRpLlNhZmVMYXp5JCRhbm9uZnVuJHN0cmljdCQxAAAAAAAAAAACAAFMAAd2YWx1ZSQxcQB+AEd4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AEYBc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AC1MAAlpbmhlcml0ZWRxAH4ALUwAB3BhcmVudHNxAH4ALXhxAH4AT3NxAH4ARgF1cQB+ACgAAAAAcHNxAH4ARgF1cQB+ACgAAAAAcHNxAH4ARgF1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAXNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AE50AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AE5zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AGd0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AGhwcHNxAH4AKnEAfgA3cQB+ADlxAH4AO3EAfgA8cQB+AD5+cQB+AD90AAZNb2R1bGV1cQB+AEMAAAAAc3EAfgBGAHBzcQB+AEtxAH4AUHNxAH4ARgFzcQB+AFJzcQB+AEYBdXEAfgAoAAAAAHBzcQB+AEYBdXEAfgAoAAAAAHBzcQB+AEYBdXEAfgBZAAAAAHBwdXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAAFzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAcb3JnLmZ1bmN0aW9uYWxrb2Fucy5mb3JzY2FsYXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABSVouE5J1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdABGL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvdGFyZ2V0L3NjYWxhLTIuMTAvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFHnYWU3bX/je9ORslCmLGFiNgEwp
source infos:
51 items
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAdvancedOptions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutAsserts.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutByNameParameter.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutCaseClasses.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutClasses.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutConstructors.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEmptyValues.scala -> 
AAAAAgAAAQAAAA8AEyAgICBhc3NlcnQoYSBlcSBfXykBAAABAwEAAAANAQANICAgICAgICAgICAgIAEAby9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3NyYy90ZXN0L3NjYWxhL29yZy9mdW5jdGlvbmFsa29hbnMvZm9yc2NhbGEvQWJvdXRFbXB0eVZhbHVlcy5zY2FsYQEAby9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3NyYy90ZXN0L3NjYWxhL29yZy9mdW5jdGlvbmFsa29hbnMvZm9yc2NhbGEvQWJvdXRFbXB0eVZhbHVlcy5zY2FsYQBuY29tcGFyaW5nIHZhbHVlcyBvZiB0eXBlcyBOb25lLnR5cGUgYW5kIG9yZy5zY2FsYXRlc3QubWF0Y2hlcnMuTWF0Y2hlcltBbnldIHVzaW5nIGBlcScgd2lsbCBhbHdheXMgeWllbGQgZmFsc2UBAAABAAAADwATICAgIGFzc2VydChhIGVxIF9fKQEAAAEDAQAAAA0BAA0gICAgICAgICAgICAgAQBvL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvc3JjL3Rlc3Qvc2NhbGEvb3JnL2Z1bmN0aW9uYWxrb2Fucy9mb3JzY2FsYS9BYm91dEVtcHR5VmFsdWVzLnNjYWxhAQBvL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvc3JjL3Rlc3Qvc2NhbGEvb3JnL2Z1bmN0aW9uYWxrb2Fucy9mb3JzY2FsYS9BYm91dEVtcHR5VmFsdWVzLnNjYWxhAGpOb25lLnR5cGUgYW5kIG9yZy5zY2FsYXRlc3QubWF0Y2hlcnMuTWF0Y2hlcltBbnldIGFyZSB1bnJlbGF0ZWQ6IHRoZXkgd2lsbCBtb3N0IGxpa2VseSBuZXZlciBjb21wYXJlIGVxdWFsAQAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutEnumerations.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutExtractors.scala -> 
AAAABAAAAQAAADIAISAgICAgIGNhc2UgXyA9PiAoIkZvcmQiLCAiRWRzZWwiKQEAAAXsAQAAABABABAgICAgICAgICAgICAgICAgAQBuL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvc3JjL3Rlc3Qvc2NhbGEvb3JnL2Z1bmN0aW9uYWxrb2Fucy9mb3JzY2FsYS9BYm91dEV4dHJhY3RvcnMuc2NhbGEBAG4vVXNlcnMvbHVxaS9HaXRIdWIvU2NhbGEvc2NhbGFrb2Fuc2V4ZXJjaXNlcy9zcmMvdGVzdC9zY2FsYS9vcmcvZnVuY3Rpb25hbGtvYW5zL2ZvcnNjYWxhL0Fib3V0RXh0cmFjdG9ycy5zY2FsYQAQdW5yZWFjaGFibGUgY29kZQEAAAEAAABEACEgICAgICBjYXNlIF8gPT4gKCJGb3JkIiwgIkVkc2VsIikBAAAH4wEAAAAQAQAQICAgICAgICAgICAgICAgIAEAbi9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3NyYy90ZXN0L3NjYWxhL29yZy9mdW5jdGlvbmFsa29hbnMvZm9yc2NhbGEvQWJvdXRFeHRyYWN0b3JzLnNjYWxhAQBuL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvc3JjL3Rlc3Qvc2NhbGEvb3JnL2Z1bmN0aW9uYWxrb2Fucy9mb3JzY2FsYS9BYm91dEV4dHJhY3RvcnMuc2NhbGEAEHVucmVhY2hhYmxlIGNvZGUBAAABAAAAWAAbICAgICAgY2FzZSBfID0+ICJOb3QgZm91bmQiAQAACo8BAAAAEAEAECAgICAgICAgICAgICAgICABAG4vVXNlcnMvbHVxaS9HaXRIdWIvU2NhbGEvc2NhbGFrb2Fuc2V4ZXJjaXNlcy9zcmMvdGVzdC9zY2FsYS9vcmcvZnVuY3Rpb25hbGtvYW5zL2ZvcnNjYWxhL0Fib3V0RXh0cmFjdG9ycy5zY2FsYQEAbi9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3NyYy90ZXN0L3NjYWxhL29yZy9mdW5jdGlvbmFsa29hbnMvZm9yc2NhbGEvQWJvdXRFeHRyYWN0b3JzLnNjYWxhABB1bnJlYWNoYWJsZSBjb2RlAQAAAQAAAGkAGSAgICAgIGNhc2UgXyA9PiAidW5rbm93biIBAAAMfAEAAAAQAQAQICAgICAgICAgICAgICAgIAEAbi9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3NyYy90ZXN0L3NjYWxhL29yZy9mdW5jdGlvbmFsa29hbnMvZm9yc2NhbGEvQWJvdXRFeHRyYWN0b3JzLnNjYWxhAQBuL1VzZXJzL2x1cWkvR2l0SHViL1NjYWxhL3NjYWxha29hbnNleGVyY2lzZXMvc3JjL3Rlc3Qvc2NhbGEvb3JnL2Z1bmN0aW9uYWxrb2Fucy9mb3JzY2FsYS9BYm91dEV4dHJhY3RvcnMuc2NhbGEAEHVucmVhY2hhYmxlIGNvZGUBAAAAAA==
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutForExpressions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutFormatting.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutHigherOrderFunctions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutImplicits.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixPrefixAndPostfixOperators.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInfixTypes.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutInteroperability.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutIterables.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLazySequences.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLists.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralBooleans.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralNumbers.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutLiteralStrings.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutManifests.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMaps.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMethods.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableMaps.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutMutableSets.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutNamedAndDefaultArguments.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutObjects.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutOptions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutParentClasses.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartialFunctions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPartiallyAppliedFunctions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPathDependentTypes.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPatternMatching.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutPreconditions.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRange.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRecursion.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutRepeatedParameters.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSequencesAndArrays.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutSets.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraits.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTraversables.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTuples.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeSignatures.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutTypeVariance.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutUniformAccessPrinciple.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/AboutValAndVar.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/Koans.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/KoanSuite.scala -> 
AAAAAAAAAAA=
/Users/luqi/GitHub/Scala/scalakoansexercises/src/test/scala/org/functionalkoans/forscala/support/Master.scala -> 
AAAAAAAAAAA=
compilations:
4 items
0 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABSV4n4VV1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQASy9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3RhcmdldC9zY2FsYS0yLjEwL3Rlc3QtY2xhc3Nlc3QAAS8=
1 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABSV4rQO51cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQASy9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3RhcmdldC9zY2FsYS0yLjEwL3Rlc3QtY2xhc3Nlc3QAAS8=
2 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABSV4r2m11cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQASy9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3RhcmdldC9zY2FsYS0yLjEwL3Rlc3QtY2xhc3Nlc3QAAS8=
3 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABSV4sUDx1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQASy9Vc2Vycy9sdXFpL0dpdEh1Yi9TY2FsYS9zY2FsYWtvYW5zZXhlcmNpc2VzL3RhcmdldC9zY2FsYS0yLjEwL3Rlc3QtY2xhc3Nlc3QAAS8=
